<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>秋招记录</title>
    <link href="/2022/08/22/%E7%A7%8B%E6%8B%9B%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/08/22/%E7%A7%8B%E6%8B%9B%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>今年的秋招已经开始了，上半年找实习就只尝试投了几个，笔试和面试经历得很少，在经过一段时间的复习和练习之后，终于在下半年有信心采用海投策略，下面记录一下笔试面试，该记录更新至找到工作（哈哈）~</p><h3 id="2022-x2F-8-x2F-19-x2F-9-00-海康威视"><a href="#2022-x2F-8-x2F-19-x2F-9-00-海康威视" class="headerlink" title="2022&#x2F;8&#x2F;19&#x2F;9:00 海康威视"></a>2022&#x2F;8&#x2F;19&#x2F;9:00 海康威视</h3><ol><li><p>编程题：判断链表是否是回文链表。</p></li><li><p>选择题&#x2F;判断题：多态的分类以及重载和重写，构造函数和虚析构函数，继承的分类以及可访问性，C++ 变量和内存空间等知识。</p></li><li><p>简答题：1. 动态多态和静态多态，定义，区别和优缺点；2. 字符数组的两种定义的区别。</p><p>字符数组，字符串，字符串指针的区别</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">char</span> a[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">char</span> b[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><span class="hljs-type">char</span> c[] = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">char</span> d[] = <span class="hljs-string">&quot;abc\0&quot;</span>;<br><span class="hljs-comment">//sizeof(a)=3, strlen(a)=3</span><br><span class="hljs-comment">//sizeof(b或c)=4, strlen(b或c)=3</span><br><span class="hljs-comment">//sizeof(d)=5, strlen(d)=3</span><br><br><span class="hljs-type">char</span> a[] = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">char</span> a1[] = <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-type">char</span> b[] = <span class="hljs-string">&quot;abc\0&quot;</span>;<br><span class="hljs-type">char</span> c[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br><span class="hljs-type">char</span> d[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br><br><span class="hljs-type">char</span>* e = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-type">char</span>* e1 = <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-type">char</span>* f = <span class="hljs-string">&quot;abc\0&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="2022-x2F-8-x2F-20-x2F-10-00-美团"><a href="#2022-x2F-8-x2F-20-x2F-10-00-美团" class="headerlink" title="2022&#x2F;8&#x2F;20&#x2F;10:00 美团"></a>2022&#x2F;8&#x2F;20&#x2F;10:00 美团</h3><ol><li><p>两列菜品，菜品数相同，一列荤菜 A，一列素菜 B，均用字符串表示，要求从这两列菜中选择菜品组成新的菜品序列，使得菜品序列是荤菜和素菜是交替排列的，并以字符串的形式返回该排列。</p></li><li><p>某学生期末考试，有 n 科考试，每门科目有一个分数 si，还有一个他能得多少分得概率 pi 表示如果不复习他可以得多少分；该学生可以复习 m 科，复习完的科目可以得到满分（即可认为得分概率变为1），问怎么复习才能获得最高分并返回该最高分，并保留两位小数。</p><p><strong>按照复习所获得的收益排序，优先复习收益最高的。</strong></p></li><li><p>一个地图上（1&lt;&#x3D;x,y&lt;&#x3D;n），放置有3个已知位置的定位装置，地图上还有一个未知位置的信标，已知该信标到3个定位装置的曼哈顿距离，求该信标的位置，如果有多个位置符合，返回字典序最小的那个位置。</p><p><strong>模拟</strong></p></li><li><p>有两个序列，序列中每个元素是一个数，序列的长度分别为 n 和 m，现在希望通过某些操作（删除和替换）使得两个序列相同，现定义两种操作：1）删除，删除序列中的数 a，花费为 |a|；2）替换，将序列中的数 a 替换为 b，花费为 |a-b|。问如何在花费最小的情况下使得两个序列变得一样。</p><p><strong>编辑距离  动态规划</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(m, <span class="hljs-number">0</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) cin &gt;&gt; b[i];<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">dp</span>(n+<span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m+<span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= m; i++) <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) dp[<span class="hljs-number">0</span>][i] = <span class="hljs-built_in">abs</span>(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]) + <span class="hljs-built_in">abs</span>(b[i<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">abs</span>(dp[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>]) + <span class="hljs-built_in">abs</span>(a[i<span class="hljs-number">-1</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">if</span> (a[i<span class="hljs-number">-1</span>] == b[j<span class="hljs-number">-1</span>]) &#123;<br>                dp[i][j] = dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>];<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                dp[i][j] = <span class="hljs-built_in">min</span>(&#123;dp[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>] + <span class="hljs-built_in">abs</span>(a[i<span class="hljs-number">-1</span>] - b[j<span class="hljs-number">-1</span>]), dp[i<span class="hljs-number">-1</span>][j] + <span class="hljs-built_in">abs</span>(a[i<span class="hljs-number">-1</span>]), dp[i<span class="hljs-number">-1</span>][j] + <span class="hljs-built_in">abs</span>(b[j<span class="hljs-number">-1</span>])&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; dp[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>飞机损坏需要维修，已知飞机有 n 处损坏，每处损坏需要配重为 ni 的材料来修复且只能用一个，另外还有 m 种材料，每种材料的配重为 mi，每种材料的个数无限，求修复这些损坏最少需要多少配重。</p><p><strong>二分搜索</strong></p></li></ol><p>1.2.3通过100%，4未通过，5通过81%。</p><h3 id="2022-x2F-8-x2F-20-x2F-19-00-科大讯飞"><a href="#2022-x2F-8-x2F-20-x2F-19-00-科大讯飞" class="headerlink" title="2022&#x2F;8&#x2F;20&#x2F;19:00 科大讯飞"></a>2022&#x2F;8&#x2F;20&#x2F;19:00 科大讯飞</h3><ol><li><p>求特殊序列的和，该序列首项是 1&#x2F;2，后一项的分子是前一项的分母，后一项的分母是前一项分子分母之和，求前 n 项的和，将返回值保留两位有效数字。</p></li><li><p>SDP 命令合法性判断，其命令格式为”&lt;type&gt;&#x3D;&lt;value&gt;”，其中 type 只能是单个小写英文字母，value 可以由小写英文字母、数字和空格组成且不能以空格开头，给定一个命令，判断是否是合法的 SDP 命令。</p></li><li><p>在一个 4*4 的迷宫中，0表示可通，1表示不可通，8表示宝藏所在位置，从迷宫边界处进入迷宫，求找到宝藏的最短路径，并将具体路径返回。</p></li><li><p>选择题：涉及数学、操作系统、类特性以及简单的推理判断找规律等题。</p><p>从0-5数字中组成五位数，1和2都被选中且1在2之前的概率为多少？</p><p>象棋中马的跳法，在坐标轴中，马位于（1，1），求其跳到（12，11）的不同路径数。</p><p>极大似然法估计参数</p></li></ol><p>1.2.3.通过率均为100%。</p><h3 id="2022-x2F-8-x2F-21-x2F-21-00-字节跳动"><a href="#2022-x2F-8-x2F-21-x2F-21-00-字节跳动" class="headerlink" title="2022&#x2F;8&#x2F;21&#x2F;21:00 字节跳动"></a>2022&#x2F;8&#x2F;21&#x2F;21:00 字节跳动</h3><ol><li>有 m 个字符串，每个字符串均由 0 和 1 组成，每个字符串的长度为 ni。对于每个字符串，计算其和，此处的和定义为，字符串中所有相邻两个字符所表示的数的和，对于每个字符串，还有一个交换次数上限制 ki，每次可交换相邻两个字符，求如何交换可以使得字符串的和最小，输出最小和。例，字符串“01110”，其和为 01+11+11+10&#x3D;31，若其 k &#x3D; 4，则交换后可以是”10101”，最小和为22。</li><li>走迷宫，迷宫大小为 n * m，其是一个二维字符数组，迷宫中有一个唯一出口（用字符 ‘O’ 表示），迷宫中的正常道路用字符 ‘.’ 表示，迷宫中还有传送带，且传送带具有方向（上下左右分别用’U’ ‘D’ ‘L’ ‘R’表示），当人踏上传送带就按传送带传送方向传送直至传送到正常道路上，如果传送到边界之外就认为没有走出迷宫。显然，迷宫中有这样的一种位置，在该位置上，无论往哪个方向走，都无法走出迷宫，求这样位置的数量。注意，可认为迷宫中位置总数为 n * m。</li><li>模式匹配，有一个模式字符p，其示例为”abc{xyz}de{x}f{y}g”，其可以匹配字符串”abcdefg”, “abcgggdedffg”，不能匹配”abcdef”, “abcfadffg”。给定一个模式字符串，再给定 n 个字符串，判断每个字符串是否可以匹配该模式字符串。</li><li>获胜概率，小明有 n 个骰子（1&lt;&#x3D;n&lt;&#x3D;20），第 i 个骰子的面数为 ai（2&lt;&#x3D;ai&lt;&#x3D;8），对于该骰子，摇到每一面的概率为 1&#x2F;ai；小红有 m 个骰子（1&lt;&#x3D;m&lt;&#x3D;20），第 i 个骰子的面数为 bi（2&lt;&#x3D;bi&lt;&#x3D;8），对于该骰子，摇到每一面的概率为 1&#x2F;bi。两人将自己所有的骰子摇一次，最终结果是摇到的所有点数之和，求小明摇骰子之和比小红的要大的概率。</li></ol><p>2.3.通过100%，1.4.未通过。</p><h3 id="2022-x2F-8-23-x2F-9-00-荣耀"><a href="#2022-x2F-8-23-x2F-9-00-荣耀" class="headerlink" title="2022&#x2F;8.23&#x2F;9:00 荣耀"></a>2022&#x2F;8.23&#x2F;9:00 荣耀</h3>]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>新博客之旅</title>
    <link href="/2022/05/23/%E6%96%B0%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <url>/2022/05/23/%E6%96%B0%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<p>18年5月，我第一次使用 hexo 在 github 上搭建了自己的博客平台，并开始写博客。但是并没有持续很长时间，一方面当时写博客就有点儿应付实验室的意思，另一方面自己当时时间都用来课程学习和娱乐也没有留出很多写博客的时间。所以也就渐渐淡忘了这个平台。</p><p>18年10月，我开始在 csdn 上写博客，从当时至今，陆陆续续地写，虽然中间也断过不少时候，但是得益于其简单的发布方式，我就一直使用 csdn 来纪录自己的日常学习经历。</p><p>后来我偶然得知 github 上的 readme 主页，甚觉炫酷，就决心也整理一个来打通自己的各个账号，也希望构建以 github 为中心的账号平台体系。这时，我就也想起了自己之前按默认配置的 hexo 博客，甚觉丑陋，就也决心重新配置 hexo 博客，然后之后就把博客都转移到这上面。</p><p>在我看来，记录本身就是一件神圣的事情，不管是记录学习心得还是日常感悟，如果很久之后再回头看看自己的记录说不定可以重拾当时的心情，这听起来就是一件很炫酷的事情。</p><p>至此，新博客之旅开始~</p>]]></content>
    
    
    <categories>
      
      <category>Daily</category>
      
      <category>Feeling</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Daily</tag>
      
      <tag>Feeling</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 配置教程</title>
    <link href="/2022/05/22/Hexo%20%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/"/>
    <url>/2022/05/22/Hexo%20%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-及配置"><a href="#hexo-及配置" class="headerlink" title="hexo 及配置"></a>hexo 及配置</h2><p><a href="https://blog.csdn.net/m0_50086696/article/details/122802356">https://blog.csdn.net/m0_50086696/article/details/122802356</a></p><p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="fluid-主题"><a href="#fluid-主题" class="headerlink" title="fluid 主题"></a>fluid 主题</h2><p><a href="https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B">https://hexo.fluid-dev.com/docs/start/#%E4%B8%BB%E9%A2%98%E7%AE%80%E4%BB%8B</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6">https://hexo.fluid-dev.com/docs/guide/#tag-%E6%8F%92%E4%BB%B6</a></p><h3 id="添加评论和阅读次数"><a href="#添加评论和阅读次数" class="headerlink" title="添加评论和阅读次数"></a>添加评论和阅读次数</h3><p><a href="https://www.zhihu.com/question/47405173">https://www.zhihu.com/question/47405173</a></p><p><a href="https://my.oschina.net/leonadmin/blog/4331045">https://my.oschina.net/leonadmin/blog/4331045</a></p><h2 id="保存-hexo-配置"><a href="#保存-hexo-配置" class="headerlink" title="保存 hexo 配置"></a>保存 hexo 配置</h2><p><a href="https://zhuanlan.zhihu.com/p/476603074">https://zhuanlan.zhihu.com/p/476603074</a></p><p><a href="https://blog.csdn.net/qq_23483671/article/details/105154884">https://blog.csdn.net/qq_23483671/article/details/105154884</a></p>]]></content>
    
    
    <categories>
      
      <category>Techonology</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Techonology</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL 容器适配器</title>
    <link href="/2022/04/06/C++%20STL%20%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/"/>
    <url>/2022/04/06/C++%20STL%20%E5%AE%B9%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="容器适配器-stack"><a href="#容器适配器-stack" class="headerlink" title="容器适配器 stack"></a>容器适配器 stack</h3><p><a href="http://c.biancheng.net/view/6971.html">http://c.biancheng.net/view/6971.html</a></p><p>stack 栈适配器是一种单端开口的容器（如图 1 所示），实际上该容器模拟的就是栈存储结构，即无论是向里存数据还是从中取数据，都只能从这一个开口实现操作。</p><p>由于 stack 适配器以模板类 stack&lt;T,Container&#x3D;deque&lt;T&gt;&gt;（其中 T 为存储元素的类型，Container 表示底层容器的类型）的形式位于&lt;stack&gt;头文件中，并定义在 std 命名空间里。</p><blockquote><p>作为stack容器适配器的基础容器，其必须提供 empty()、size()、back()、push_back()、pop_back() 这 5 个成员函数，符合条件的序列式容器有vector、deque 和 list 。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>stack&lt;<span class="hljs-type">int</span>&gt; s;<span class="hljs-comment">//创建空栈</span><br>stack&lt;<span class="hljs-type">int</span>, list&lt;<span class="hljs-type">int</span>&gt; &gt; s;<span class="hljs-comment">//创建使用list基础容器的栈</span><br><br>list&lt;<span class="hljs-type">int</span>&gt; values &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>stack&lt;<span class="hljs-type">int</span>,list&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">my_stack</span> (values); <span class="hljs-comment">//从其他基础容器中构造(需要该容器的类型和 stack 底层使用的基础容器类型相同即可)</span><br><span class="hljs-comment">//者复制构造</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++">s.<span class="hljs-built_in">empty</span>();<span class="hljs-comment">//栈为空时返回true</span><br>s.<span class="hljs-built_in">size</span>();<span class="hljs-comment">//返回栈中元素个数</span><br>s.<span class="hljs-built_in">top</span>();<span class="hljs-comment">//返回栈顶与元素的引用</span><br>s.<span class="hljs-built_in">push</span>(ele);<span class="hljs-comment">//将一个元素进栈</span><br>s.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//出栈</span><br>s.<span class="hljs-built_in">swap</span>(s1);<span class="hljs-comment">//交换两个栈的元素，需要注意的是，进行互换的 2 个 stack 适配器中存储的元素类型以及底层采用的基础容器类型，都必须相同</span><br></code></pre></td></tr></table></figure><h3 id="容器适配器-queue"><a href="#容器适配器-queue" class="headerlink" title="容器适配器 queue"></a>容器适配器 queue</h3><p><a href="http://c.biancheng.net/view/6978.html">http://c.biancheng.net/view/6978.html</a></p><p>queue 容器适配器有 2 个开口，其中一个开口专门用来输入数据，另一个专门用来输出数据。这种存储结构最大的特点是，最先进入 queue 的元素，也可以最先从 queue 中出来，即用此容器适配器存储数据具有“先进先出（简称 “FIFO” ）”的特点，因此 queue 又称为队列适配器。</p><p>queue 容器适配器以模板类 queue&lt;T,Container&#x3D;deque&lt;T&gt;&gt;（其中 T 为存储元素的类型，Container 表示底层容器的类型）的形式位于&lt;queue&gt;头文件中，并定义在 std 命名空间里。</p><blockquote><p>作为 queue 容器适配器的基础容器，其必须提供 front()、back()、push_back()、pop_front()、empty() 和 size() 这几个成员函数，符合条件的序列式容器仅有 deque 和 list。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><br>qeque&lt;<span class="hljs-type">int</span>&gt; values&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-function">queue&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">my_queue</span><span class="hljs-params">(values)</span></span>;<span class="hljs-comment">//使用基础容器初始化 queue 适配器，由于 my_queue 底层采用的是 deque 容器，和 values 类型一致，且存储的也都是 int 类型元素，因此可以用 values 对 my_queue 进行初始化。</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++">q.<span class="hljs-built_in">empty</span>();<br>q.<span class="hljs-built_in">size</span>();<br><br>q.<span class="hljs-built_in">front</span>();<br>q.<span class="hljs-built_in">back</span>();<br><br>q.<span class="hljs-built_in">push</span>(ele);<br>q.<span class="hljs-built_in">emplace</span>(ele);<br>q.<span class="hljs-built_in">pop</span>();<br><br>q.<span class="hljs-built_in">swap</span>(q2);<br></code></pre></td></tr></table></figure><h3 id="容器适配器-priority-queue"><a href="#容器适配器-priority-queue" class="headerlink" title="容器适配器 priority_queue"></a>容器适配器 priority_queue</h3><p>priority_queue 容器适配器模拟的也是队列这种存储结构，即使用此容器适配器存储元素只能“从一端进（称为队尾），从另一端出（称为队头）”，且每次只能访问 priority_queue 中位于队头的元素。</p><p>但是，priority_queue 容器适配器中元素的存和取，遵循的并不是 “First in,First out”（先入先出）原则，而是“First in，Largest&#x2F;Smallest out”原则。</p><p>priority_queue 容器适配器为了保证每次从队头移除的都是当前优先级最高的元素，每当有新元素进入，它都会根据既定的排序规则找到优先级最高的元素，并将其移动到队列的队头；同样，当 priority_queue 从队头移除出一个元素之后，它也会再找到当前优先级最高的元素，并将其移动到队头。</p><p>基于 priority_queue 的这种特性，因此该容器适配器有被称为优先级队列。</p><blockquote><p>priority_queue 容器适配器“First in，Largest out”的特性，和它底层采用堆结构存储数据是分不开的。有关该容器适配器的底层实现</p></blockquote><p><a href="http://c.biancheng.net/stl/">STL</a> 中，priority_queue 容器适配器的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T,        <br>        <span class="hljs-keyword">typename</span> Container=std::vector&lt;T&gt;,        <br>        <span class="hljs-keyword">typename</span> Compare=std::less&lt;T&gt; &gt; <br><span class="hljs-keyword">class</span> priority_queue&#123;    <br>    <span class="hljs-comment">//......</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，priority_queue 容器适配器模板类最多可以传入 3 个参数，它们各自的含义如下：</p><ul><li><p>typename T：指定存储元素的具体类型；</p></li><li><p>typename Container：指定 priority_queue 底层使用的基础容器，默认使用 vector 容器。</p><blockquote><p>作为 priority_queue 容器适配器的底层容器，其必须包含 empty()、size()、front()、push_back()、pop_back() 这几个成员函数，<a href="http://c.biancheng.net/stl/">STL</a> 序列式容器中只有 vector 和 deque 容器符合条件。</p></blockquote></li><li><p>typename Compare：指定容器中评定元素优先级所遵循的排序规则，默认使用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">std::less&lt;T&gt;<br></code></pre></td></tr></table></figure><p>按照元素值从大到小进行排序 (大根堆)，还可以使用</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">std::greater&lt;T&gt;<br></code></pre></td></tr></table></figure><p>按照元素值从小到大排序  (小根堆)，但更多情况下是使用自定义的排序规则。</p><blockquote><p>其中，std::less<T> 和 std::greater<T> 都是以函数对象的方式定义在 <function> 头文件中。关于如何自定义排序规则，后续章节会做详细介绍。</p></blockquote></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>priority_queue&lt;<span class="hljs-type">int</span>&gt; values;<br><br><span class="hljs-comment">//使用普通数组</span><br><span class="hljs-type">int</span> values[]&#123;<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;;<br>priority_queue&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">copy_values</span>(values,values+<span class="hljs-number">4</span>);<span class="hljs-comment">//&#123;4,2,3,1&#125;</span><br><span class="hljs-comment">//使用序列式容器</span><br>array&lt;<span class="hljs-type">int</span>,4&gt;values&#123; <span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span> &#125;;<br>priority_queue&lt;<span class="hljs-type">int</span>&gt;<span class="hljs-built_in">copy_values</span>(values.<span class="hljs-built_in">begin</span>(),values.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//&#123;4,2,3,1&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++">pq.<span class="hljs-built_in">empty</span>();<br>pq.<span class="hljs-built_in">size</span>();<br><br>pq.<span class="hljs-built_in">top</span>();<br>pq.<span class="hljs-built_in">push</span>();<br>pq.<span class="hljs-built_in">pop</span>();<br>pq.<span class="hljs-built_in">emplace</span>();<br><br>pq.<span class="hljs-built_in">swap</span>(pq2);<br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//自定义数据类型之二</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> x,y;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> a=<span class="hljs-number">0</span>, <span class="hljs-type">int</span> b=<span class="hljs-number">0</span>):<br>            <span class="hljs-built_in">x</span>(a), <span class="hljs-built_in">y</span>(b) &#123;&#125;<br>&#125;;<br><span class="hljs-comment">//重写仿函数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp1</span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(Node a, Node b)</span></span>&#123;<br>        <span class="hljs-comment">//x大的Node优先级高，小根堆</span><br>        <span class="hljs-keyword">if</span>(a.x == b.x)<br>            <span class="hljs-keyword">return</span> a.y &gt; b.y;<br>        <span class="hljs-keyword">return</span> a.x &gt; b.x;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//重载比较运算符</span><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (Node a, Node b) &#123;<span class="hljs-comment">//对应于less函数</span><br>    <span class="hljs-comment">//x值较小的Node优先级高，大根堆</span><br>    <span class="hljs-keyword">if</span>(a.x == b.x)<br>        <span class="hljs-keyword">return</span> a.y &lt; b.y;<br>    <span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt; (Node a, Node b)&#123;<span class="hljs-comment">//对应于greater函数</span><br>    <span class="hljs-comment">//x值较大的Node优先级高，小根堆</span><br>    <span class="hljs-keyword">if</span>( a.x == b.x )<br>        <span class="hljs-keyword">return</span> a.y &gt; b.y;<br>    <span class="hljs-keyword">return</span> a.x &gt; b.x;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test_pq3</span><span class="hljs-params">()</span></span>&#123;<br>    priority_queue&lt;Node, vector&lt;Node&gt;, less&lt;&gt;&gt; p1;<br>    priority_queue&lt;Node, vector&lt;Node&gt;, greater&lt;&gt;&gt; p2;<br>    priority_queue&lt;Node, vector&lt;Node&gt;, cmp1&gt; p3;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">5</span>; ++i) &#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-built_in">rand</span>()%<span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> y = <span class="hljs-built_in">rand</span>()%<span class="hljs-number">10</span>;<br>        p1.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(x, y));<br>        p2.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(x, y));<br>        p3.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Node</span>(x, y));<br>    &#125;<br><br><br>    <span class="hljs-keyword">while</span>(!p1.<span class="hljs-built_in">empty</span>())&#123;<br>        cout&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p1.<span class="hljs-built_in">top</span>().x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; p1.<span class="hljs-built_in">top</span>().y &lt;&lt; <span class="hljs-string">&quot;)    &quot;</span>;<br>        p1.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span>(!p2.<span class="hljs-built_in">empty</span>())&#123;<br>        cout&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p2.<span class="hljs-built_in">top</span>().x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; p2.<span class="hljs-built_in">top</span>().y &lt;&lt; <span class="hljs-string">&quot;)    &quot;</span>;<br>        p2.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">while</span>(!p3.<span class="hljs-built_in">empty</span>())&#123;<br>        cout&lt;&lt; <span class="hljs-string">&quot;(&quot;</span> &lt;&lt; p3.<span class="hljs-built_in">top</span>().x &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; p3.<span class="hljs-built_in">top</span>().y &lt;&lt; <span class="hljs-string">&quot;)    &quot;</span>;<br>        p3.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">(9, 4)    (8, 8)    (4, 0)    (2, 4)    (1, 7)</span><br><span class="hljs-comment">(1, 7)    (2, 4)    (4, 0)    (8, 8)    (9, 4)</span><br><span class="hljs-comment">(1, 7)    (2, 4)    (4, 0)    (8, 8)    (9, 4)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL 无序关联式容器</title>
    <link href="/2022/04/04/C++%20STL%20%E6%97%A0%E5%BA%8F%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/04/04/C++%20STL%20%E6%97%A0%E5%BA%8F%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="无序关联式容器-unordered-map"><a href="#无序关联式容器-unordered-map" class="headerlink" title="无序关联式容器 unordered_map"></a>无序关联式容器 unordered_map</h2><p><a href="http://c.biancheng.net/view/7231.html">http://c.biancheng.net/view/7231.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span>,                        <span class="hljs-comment">//键值对中键的类型</span><br>           <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,                          <span class="hljs-comment">//键值对中值的类型</span><br>           <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hash</span> = hash&lt;Key&gt;,           <span class="hljs-comment">//容器内部存储键值对所用的哈希函数</span><br>           <span class="hljs-keyword">class</span> Pred = equal_to&lt;Key&gt;,       <span class="hljs-comment">//判断各个键值对键相同的规则</span><br>           <span class="hljs-keyword">class</span> Alloc = allocator&lt; pair&lt;<span class="hljs-type">const</span> Key,T&gt; &gt;  <span class="hljs-comment">// 指定分配器对象的类型</span><br>           &gt; <span class="hljs-keyword">class</span> unordered_map;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//初始化</span><br>unordered_map&lt;string, string&gt; umap;<br>unordered_map&lt;string, string&gt; umap&#123;&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>&#125;&#125;;<br><span class="hljs-function">unordered_map&lt;string, string&gt; <span class="hljs-title">umap</span><span class="hljs-params">(umap2)</span></span>;<br><span class="hljs-function">unordered_map&lt;string, string&gt; <span class="hljs-title">umap</span><span class="hljs-params">(umap2.begin(), ump2.begin())</span></span>;<br></code></pre></td></tr></table></figure><p>方法同关联式容器map~</p><h2 id="无序关联式容器-unordered-set"><a href="#无序关联式容器-unordered-set" class="headerlink" title="无序关联式容器 unordered_set"></a>无序关联式容器 unordered_set</h2><p><a href="http://c.biancheng.net/view/7250.html">http://c.biancheng.net/view/7250.html</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span>,            <span class="hljs-comment">//容器中存储元素的类型</span><br>           <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hash</span> = hash&lt;Key&gt;,    <span class="hljs-comment">//确定元素存储位置所用的哈希函数</span><br>           <span class="hljs-keyword">class</span> Pred = equal_to&lt;Key&gt;,   <span class="hljs-comment">//判断各个元素是否相等所用的函数</span><br>           <span class="hljs-keyword">class</span> Alloc = allocator&lt;Key&gt;   <span class="hljs-comment">//指定分配器对象的类型</span><br>           &gt; <span class="hljs-keyword">class</span> unordered_set;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++">unordered_set&lt;<span class="hljs-type">int</span>&gt; us;<br>unordered_set&lt;<span class="hljs-type">int</span>&gt; us&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>&#125;;<br></code></pre></td></tr></table></figure><p>方法同set~</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//自定义数据类型，需要重写哈希函数和比较（相等）函数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> x, y;<br>    <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">0</span>, <span class="hljs-type">int</span> y=<span class="hljs-number">0</span>) : <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br><br><span class="hljs-comment">//    friend bool operator== (const Node &amp;p1, const Node &amp;p2) &#123;</span><br><span class="hljs-comment">//        return p1.x == p2.x and p1.y == p2.y;</span><br><span class="hljs-comment">//    &#125;</span><br>&#125;;<br><span class="hljs-comment">//仿函数，相等</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Node &amp;p1, <span class="hljs-type">const</span> Node &amp;p2)</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-comment">//需要定义为const函数</span><br>        <span class="hljs-keyword">return</span> p1.x == p2.x <span class="hljs-keyword">and</span> p1.y == p2.y;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//仿函数，哈希</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">hashnode</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Node&amp; p1)</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-comment">//需要定义为const函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span>&lt;<span class="hljs-type">int</span>&gt;()(p1.x) ^ <span class="hljs-built_in">hash</span>&lt;<span class="hljs-type">int</span>&gt;()(p1.y);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_unordered_set2</span><span class="hljs-params">()</span> </span>&#123;<br>    unordered_set&lt;Node, hashnode, cmp&gt; us;<br>    us.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">Node</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>));<br>    us.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">Node</span>(<span class="hljs-number">6</span>, <span class="hljs-number">4</span>));<br>    us.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">Node</span>(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>));<br>    us.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">Node</span>(<span class="hljs-number">9</span>, <span class="hljs-number">1</span>));<br><br>    <span class="hljs-keyword">if</span> (us.<span class="hljs-built_in">find</span>(<span class="hljs-built_in">Node</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)) != us.<span class="hljs-built_in">end</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;find\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (us.<span class="hljs-built_in">count</span>(<span class="hljs-built_in">Node</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)) == <span class="hljs-number">1</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;find\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; v: us) &#123;<br>        cout &lt;&lt; v.x &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; v.y &lt;&lt; <span class="hljs-string">&quot;    &quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ STL 关联式容器</title>
    <link href="/2022/02/26/C++%20STL%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/02/26/C++%20STL%20%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="pair数据类型"><a href="#pair数据类型" class="headerlink" title="pair数据类型"></a>pair数据类型</h2><p>关联式容器存储的是“键值对”形式的数据，其中第一个元素作为键（key），第二个元素作为值（value）。键值对”并不是普通类型数据，<a href="http://c.biancheng.net/cplus/">C++</a> <a href="http://c.biancheng.net/stl/">STL</a> 标准库提供了 pair 类模板，其专门用来将 2 个普通元素 first 和 second（可以是 C++ 基本数据类型、结构体、类自定的类型）创建成一个新元素<code>&lt;first, second&gt;</code>。</p><p>pair 类模板定义在<code>&lt;utility&gt;</code>头文件中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;utility&gt;</span></span><br>pair&lt;string, <span class="hljs-type">double</span>&gt; pair1;<span class="hljs-comment">//空pair</span><br><span class="hljs-function">pair&lt;string, <span class="hljs-type">double</span>&gt; <span class="hljs-title">pair2</span><span class="hljs-params">(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">0.3</span>)</span></span>;<span class="hljs-comment">//初始化</span><br><span class="hljs-function">pair&lt;string, <span class="hljs-type">double</span>&gt; <span class="hljs-title">pair3</span><span class="hljs-params">(pair2)</span></span>;<span class="hljs-comment">//复制构造</span><br></code></pre></td></tr></table></figure><h2 id="关联式容器-map"><a href="#关联式容器-map" class="headerlink" title="关联式容器 map"></a>关联式容器 map</h2><p><a href="http://c.biancheng.net/view/7173.html">http://c.biancheng.net/view/7173.html</a></p><p>map 容器存储的都是 pair 对象，也就是用 pair 类模板创建的键值对。其中，各个键值对的键和值可以是任意数据类型，包括 <a href="http://c.biancheng.net/cplus/">C++</a> 基本数据类型（int、double 等）、使用结构体或类自定义的类型。</p><blockquote><p>通常情况下，map 容器中存储的各个键值对都选用 string 字符串作为键的类型。</p></blockquote><p>与此同时，在使用 map 容器存储多个键值对时，该容器会自动根据各键值对的键的大小，按照既定的规则进行排序。默认情况下，map 容器选用<code>std::less&lt;T&gt;</code>排序规则（其中 T 表示键的数据类型），其会根据键的大小对所有键值对做升序排序。当然，根据实际情况的需要，我们可以手动指定 map 容器的排序规则，既可以选用 <a href="http://c.biancheng.net/stl/">STL</a> 标准库中提供的其它排序规则（比如<code>std::greater&lt;T&gt;</code>），也可以自定义排序规则。</p><p>另外需要注意的是，使用 map 容器存储的各个键值对，键的值既不能重复也不能被修改。换句话说，map 容器中存储的各个键值对不仅键的值独一无二，键的类型也会用 const 修饰，这意味着只要键值对被存储到 map 容器中，其键的值将不能再做任何修改。</p><blockquote><p>前面提到，map 容器存储的都是 pair 类型的键值对元素，更确切的说，该容器存储的都是 pair&lt;const K, T&gt; 类型（其中 K 和 T 分别表示键和值的数据类型）的键值对元素。</p></blockquote><p>引入：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br></code></pre></td></tr></table></figure><p>map容器的模板定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">Key</span>,                                     <span class="hljs-comment">// 指定键（key）的类型</span><br>           <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,                                       <span class="hljs-comment">// 指定值（value）的类型</span><br>           <span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> = less&lt;Key&gt;,                     <span class="hljs-comment">// 指定排序规则</span><br>           <span class="hljs-keyword">class</span> Alloc = allocator&lt;pair&lt;<span class="hljs-type">const</span> Key,T&gt; &gt;    <span class="hljs-comment">// 指定分配器对象的类型</span><br>           &gt; <span class="hljs-keyword">class</span> map;<br></code></pre></td></tr></table></figure><p>可以看到，map 容器模板有 4 个参数，其中后 2 个参数都设有默认值。大多数场景中，我们只需要设定前 2 个参数的值，有些场景可能会用到第 3 个参数，但最后一个参数几乎不会用到。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;map&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>map&lt;string, <span class="hljs-type">int</span>&gt; m;<span class="hljs-comment">//构建空的map容器</span><br>map&lt;string, <span class="hljs-type">int</span>&gt; m&#123;&#123;<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-number">1</span>&#125;,&#123;<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-number">2</span>&#125;&#125;;<span class="hljs-comment">//构建map容器并初始化</span><br><span class="hljs-comment">//复制构造</span><br>map&lt;string, <span class="hljs-type">int</span>&gt; m&#123;<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>), <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">2</span>)&#125;;<span class="hljs-comment">//同上</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//插入</span><br>m.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>&#125;);<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>));<br>m.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;string, <span class="hljs-type">int</span>&gt;(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>));<br>m[<span class="hljs-string">&quot;a&quot;</span>] = <span class="hljs-number">1</span>;<br>m.<span class="hljs-built_in">emplace</span>(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">1</span>);<br><br><span class="hljs-comment">//查找</span><br>iter = m.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">if</span>(iter != m.<span class="hljs-built_in">end</span>())<br>    cout &lt;&lt; <span class="hljs-string">&quot;have found&quot;</span>;<br>num = m.<span class="hljs-built_in">count</span>(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//num=0或1，存在为1，不存在为0</span><br><br><span class="hljs-comment">//删除</span><br>iter = m.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>m.<span class="hljs-built_in">erase</span>(iter);<span class="hljs-comment">//迭代器删除</span><br>m.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>(), m.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//迭代器范围删除，等同于m.clear()</span><br>m.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//关键字删除</span><br>m.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空</span><br><br><span class="hljs-comment">//迭代器</span><br>m.<span class="hljs-built_in">begin</span>();<br><br><span class="hljs-comment">//容量</span><br>m.<span class="hljs-built_in">size</span>();<br>m.<span class="hljs-built_in">max_size</span>();<br>m.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><h2 id="关联式容器-set"><a href="#关联式容器-set" class="headerlink" title="关联式容器 set"></a>关联式容器 set</h2><p>使用 set 容器存储的各个元素的值必须各不相同。更重要的是，从语法上讲 set 容器并没有强制对存储元素的类型做 const 修饰，即 set 容器中存储的元素的值是可以修改的。但是，C++ 标准为了防止用户修改容器中元素的值，对所有可能会实现此操作的行为做了限制，使得在正常情况下，用户是无法做到修改 set 容器中元素的值的。</p><blockquote><p>对于初学者来说，切勿尝试直接修改 set 容器中已存储元素的值，这很有可能破坏 set 容器中元素的有序性，最正确的修改 set 容器中元素值的做法是：先删除该元素，然后再添加一个修改后的元素。</p></blockquote><p>值得一提的是，set 容器定义于<code>&lt;set&gt;</code>头文件，并位于 std 命名空间中。</p><p>set 容器的类模板定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt; <span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>,                        <span class="hljs-comment">// 键 key 和值 value 的类型</span><br>           <span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span> = less&lt;T&gt;,        <span class="hljs-comment">// 指定 set 容器内部的排序规则</span><br>           <span class="hljs-keyword">class</span> Alloc = allocator&lt;T&gt;      <span class="hljs-comment">// 指定分配器对象的类型</span><br>           &gt; <span class="hljs-keyword">class</span> set;<br></code></pre></td></tr></table></figure><p>注意，由于 set 容器存储的各个键值对，其键和值完全相同，也就意味着它们的类型相同，因此 set 容器类模板的定义中，仅有第 1 个参数用于设定存储数据的类型。</p><blockquote><p>对于 set 类模板中的 3 个参数，后 2 个参数自带默认值，且几乎所有场景中只需使用前 2 个参数，第 3 个参数不会用到。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;set&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br>set&lt;string&gt; myset;<span class="hljs-comment">//创建空的set容器，采用默认的std::less&lt;T&gt;规则，会对存储的 string 类型元素做升序排序</span><br>set&lt;string&gt; myset&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;;<span class="hljs-comment">//创建set容器并初始化</span><br><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//同map</span><br><span class="hljs-comment">//插入</span><br>myset.<span class="hljs-built_in">insert</span>(<span class="hljs-string">&quot;d&quot;</span>);<br>myset.<span class="hljs-built_in">emplace</span>(<span class="hljs-string">&quot;d&quot;</span>);<br><br><span class="hljs-comment">//查找</span><br>iter = myset.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">if</span>(iter != myset.<span class="hljs-built_in">end</span>())<br>    cout &lt;&lt; <span class="hljs-string">&quot;have found&quot;</span>;<br>num = myset.<span class="hljs-built_in">count</span>(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//num=0或1，存在为1，不存在为0</span><br><br><span class="hljs-comment">//删除</span><br>iter = myset.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>myset.<span class="hljs-built_in">erase</span>(iter);<span class="hljs-comment">//迭代器删除</span><br>myset.<span class="hljs-built_in">erase</span>(m.<span class="hljs-built_in">begin</span>(), m.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//迭代器范围删除，等同于m.clear()</span><br>myset.<span class="hljs-built_in">erase</span>(<span class="hljs-string">&quot;a&quot;</span>);<span class="hljs-comment">//关键字删除</span><br>myset.<span class="hljs-built_in">clear</span>();<span class="hljs-comment">//清空</span><br><br><span class="hljs-comment">//迭代器</span><br>myset.<span class="hljs-built_in">begin</span>();<br><br><span class="hljs-comment">//容量</span><br>myset.<span class="hljs-built_in">size</span>();<br>myset.<span class="hljs-built_in">max_size</span>();<br>myset.<span class="hljs-built_in">empty</span>();<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//自定义数据类型</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ListNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    ListNode *next;<br>    <span class="hljs-built_in">ListNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">next</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; (<span class="hljs-type">const</span> shared_ptr&lt;ListNode&gt; &amp;p1, <span class="hljs-type">const</span> shared_ptr&lt;ListNode&gt; &amp;p2) &#123;<br>        <span class="hljs-keyword">return</span> p1-&gt;val &lt; p2-&gt;val;<br>    &#125;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt; (<span class="hljs-type">const</span> shared_ptr&lt;ListNode&gt; &amp;p1, <span class="hljs-type">const</span> shared_ptr&lt;ListNode&gt; &amp;p2) &#123;<br>        <span class="hljs-keyword">return</span> p1-&gt;val &gt; p2-&gt;val;<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//仿函数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">cmp</span> &#123;<br>    <span class="hljs-comment">//set/map要求key是不可更改的，所以重载比较运算符或者重写仿函数时，需要确保函数参数为const，对于指针，则需要确保其值不变即其指向不变</span><br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(ListNode* <span class="hljs-type">const</span>&amp;p1, ListNode* <span class="hljs-type">const</span>&amp;p2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> p1-&gt;val &lt; p2-&gt;val;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_set2</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span> ,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-keyword">auto</span> phead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">auto</span> p = phead;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;v: a) &#123;<br>        p-&gt;next = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(v);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * set存储指针数据，第一种写法是符合预期的，第二种写法只会按照指针地址进行排序</span><br><span class="hljs-comment">     * 可以使用智能指针</span><br><span class="hljs-comment">     */</span><br>    set&lt;ListNode*, cmp&gt; ms;<span class="hljs-comment">//第一种写法</span><br>    <span class="hljs-comment">//set&lt;ListNode*&gt; ms;//第二种写法</span><br>    p = phead-&gt;next;<br>    <span class="hljs-keyword">while</span> (p) &#123;<br>        ms.<span class="hljs-built_in">insert</span>(p);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; v: ms) &#123;<br>        cout &lt;&lt; v-&gt;val &lt;&lt; <span class="hljs-string">&quot;  &quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_set3</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//使用智能指针</span><br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span> ,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-keyword">auto</span> phead = <span class="hljs-built_in">make_shared</span>&lt;ListNode&gt;(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">auto</span> p = phead;<br>    set&lt;shared_ptr&lt;ListNode&gt;&gt; ms;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;v: a) &#123;<br>        <span class="hljs-keyword">auto</span> temp = <span class="hljs-built_in">make_shared</span>&lt;ListNode&gt;(v);<br>        <span class="hljs-keyword">auto</span> mp = p.<span class="hljs-built_in">get</span>();<br>        mp-&gt;next = temp.<span class="hljs-built_in">get</span>();<br>        p = temp;<br>        ms.<span class="hljs-built_in">insert</span>(temp);<br>        cout &lt;&lt; temp.<span class="hljs-built_in">get</span>()-&gt;val &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; temp.<span class="hljs-built_in">get</span>() &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; v: ms) &#123;<br>        cout &lt;&lt; v-&gt;val &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; v-&gt;next &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test_set4</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">//使用智能指针</span><br>    <span class="hljs-type">int</span> a[] = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span> ,<span class="hljs-number">9</span>&#125;;<br>    <span class="hljs-keyword">auto</span> phead = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">auto</span> p = phead;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;v: a) &#123;<br>        <span class="hljs-keyword">auto</span> temp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ListNode</span>(v);<br>        p-&gt;next = temp;<br>        p = p-&gt;next;<br>        cout &lt;&lt; temp-&gt;val &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; temp &lt;&lt; endl;<br>    &#125;<br>    cout &lt;&lt; endl;<br>    set&lt;shared_ptr&lt;ListNode&gt;&gt; ms;<br>    p = phead-&gt;next;<br>    <span class="hljs-keyword">while</span> (p) &#123;<br>        <span class="hljs-keyword">auto</span> temp = <span class="hljs-built_in">shared_ptr</span>&lt;ListNode&gt;(p);<br>        ms.<span class="hljs-built_in">insert</span>(temp);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; v: ms) &#123;<br>        cout &lt;&lt; v-&gt;val &lt;&lt; <span class="hljs-string">&quot;  &quot;</span> &lt;&lt; v-&gt;next &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
      <category>STL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>STL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 内存模型</title>
    <link href="/2022/01/30/C++%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/01/30/C++%20%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="程序的内存分配"><a href="#程序的内存分配" class="headerlink" title="程序的内存分配"></a>程序的内存分配</h2><p><a href="https://blog.csdn.net/u013007900/article/details/79338653">https://blog.csdn.net/u013007900/article/details/79338653</a></p><p>一个由C&#x2F;C++编译的程序占用的内存分为以下几个部分：</p><ul><li>栈区（stack）— 由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li><li>堆区（heap） — 一般由程序员分配释放，若程序员不释放，程序结束时可能由OS（操作系统）回收。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表。</li><li>全局区（静态区）（static）—，全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在一块区域，未初始化的全局变量和未初始化的静态变量在相邻的另一块区域。程序结束后由系统释放。</li><li>文字常量区 —常量字符串就是放在这里的。程序结束后由系统释放。</li><li>程序代码区—存放函数体的二进制代码。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span>  a=<span class="hljs-number">0</span>;   全局初始化区    <br><br><span class="hljs-type">char</span> *p1;   全局未初始化区    <br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">main</span><span class="hljs-params">()</span>    </span><br><span class="hljs-function"></span>&#123;    <br>  <span class="hljs-type">int</span>  b; <span class="hljs-comment">//栈    </span><br>  <span class="hljs-type">char</span>  s[]=<span class="hljs-string">&quot;abc&quot;</span>; <span class="hljs-comment">//栈    </span><br>  <span class="hljs-type">char</span>  *p2; <span class="hljs-comment">//栈    </span><br>  <span class="hljs-type">char</span>  *p3=<span class="hljs-string">&quot;123456&quot;</span>; <span class="hljs-comment">//123456/0在常量区，p3在栈上。    </span><br><br>  <span class="hljs-type">static</span> <span class="hljs-type">int</span> c =<span class="hljs-number">0</span>；<span class="hljs-comment">//全局（静态）初始化区    </span><br>  p1 =  (<span class="hljs-type">char</span>  *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>);  <span class="hljs-comment">//分配得来得10和20字节的区域就在堆区</span><br>  p2  = (<span class="hljs-type">char</span>  *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">20</span>);       <br>  <span class="hljs-built_in">strcpy</span>(p3,<span class="hljs-string">&quot;123456&quot;</span>); <span class="hljs-comment">//123456/0放在常量区，编译器可能会将它与p3所指向的&quot;123456&quot;  优化成一个地方。    </span><br>&#125;    <br><br></code></pre></td></tr></table></figure><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p>不要将函数定义或变量声明放到头文件中，如果同一程序的其他两个文件包含了该头文件，此时同一个程序将包含同一个函数的两个定义，即多重声明问题，这会导致错误。头文件常包含以下内容：</p><ul><li>函数原型(函数声明)</li><li>宏定义；#define或const定义的符号常量。</li><li>结构声明</li><li>类声明</li><li>模板声明</li><li>内联函数</li></ul><p>源代码文件用于具体实现，即头文件中所声明的函数或类的具体实现。</p><p>注意，只需将源代码文件加入到项目中，而不用加入头文件。这是因为#include指令管理头文件。另外，不要使用#include来包含源代码文件，这样做将导致多重声明。</p><p><a href="https://blog.csdn.net/nei504293736/article/details/90200066">https://blog.csdn.net/nei504293736/article/details/90200066</a></p><p>模板类的分离问题：</p><ul><li>声明和实现都写到.h文件中</li><li>或者，声明写到.h中，实现写到.cpp中，同时在.cpp文件中声明具体的模板类(显式实例化)</li></ul><p><a href="https://www.jianshu.com/p/bd2e05aabf7a">https://www.jianshu.com/p/bd2e05aabf7a</a></p><p><a href="https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file">https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file</a></p><h2 id="存储持续性、作用域和链接"><a href="#存储持续性、作用域和链接" class="headerlink" title="存储持续性、作用域和链接"></a>存储持续性、作用域和链接</h2><p>有4中内存方案：</p><ul><li>自动存储持续性，在函数定义中声明的 变量（包括函数参数）的存储持续性是自动的。它们在程序开始执行其所属的函数或代码块时被创建，在执行完函数或代码块时，它们使用的内存被释放。</li><li>静态存储持续性，在函数定义外定义的变量和使用关键字static定义的变量的存储持续性都为静态。它们在程序整个运行过程中都存在。</li><li>线程存储持续性，对于多线程来说，如果变量是使用关键字thread_local声明的，则其生命周期与所属的线程一样长。</li><li>动态存储持续性，用new运算符分配的内存将一直存在，直到使用delete运算符将其释放或程序结束为止。这种内存的存储持续性为动态，有时被称为自由存储（free store）或堆（heap）。</li></ul><p>作用域(scope)描述了名称在文件的多大范围内可见。可分为局部和全局，作用域为局部的变量只在定义它的代码块中可用，作用域为全局的变量在定义位置到文件结尾之间都可用。</p><p>链接性(linkage)描述了名称如何在不同单元间共享。链接性为外部的名称可在文件间共享，链接性为内部的名称只能由一个文件中的函数共享。</p><h2 id="静态持续变量与static"><a href="#静态持续变量与static" class="headerlink" title="静态持续变量与static"></a>静态持续变量与static</h2><p>程序不会使用栈或者其他来管理静态变量，而是编译器会分配固定的内存块来存储静态变量，这样这些变量在整个程序执行期间一直存在。另外如果没有显式地初始化静态变量，编译器将把它设置为默认值。</p><p>C++为静态存储持续性变量提供了3种链接性：</p><ul><li>外部链接性，可在其他文件中访问</li><li>内部链接性，只能在当前文件中访问</li><li>无链接性，只能在当前函数或代码块中访问</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> global = <span class="hljs-number">10</span>;  <span class="hljs-comment">//静态持续，外部链接</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> one_file = <span class="hljs-number">50</span>;  <span class="hljs-comment">//静态持续，内部链接</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;  <span class="hljs-comment">//静态持续，无链接性</span><br>    <span class="hljs-type">int</span> llama = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数内的static限定表明该变量会一直驻留在内存中，而函数内的普通变量会随着函数结束而生命周期结束</span><br><span class="hljs-comment">函数外的static限定表明该变量是内部链接的，而函数外的普通变量是外部链接的</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>所有静态持续变量在整个程序执行期间都存在。fun1()中声明的变量count的作用域是局部且没有链接性，但是该变量会一直存留在内存中；global和one_file的作用域都为整个文件，而one_file的链接性为内部只能在本文件中使用它，而global的链接性为外部，因此可在其他程序文件中使用它。</p><h2 id="extern与static"><a href="#extern与static" class="headerlink" title="extern与static"></a>extern与static</h2><p>链接性为外部的变量通常简称为外部变量，它们的存储持续性为静态，作用域为整个文件。外部变量是在函数外部定义的，其也可被称为全局变量。</p><p>**单定义规则(One Definition Rule, ODR)**：变量只能由一次定义。C++提供了两种变量声明。一种是定义声明(defining declaration)或简称为定义(definition)，它给变量分配存储空间；另一种声明是引用声明(referencing declaration)或简称为声明(declaration)，它不给变量分配存储空间，因为它引用已有的变量。引用声明使用关键字extern，且不进行初始化。</p><p>引用声明使用关键字extern，且不进行初始化；否则，声明为定义，导致分配存储空间。如果要在多个文件中使用外部变量，只需在一个文件中包含该变量的定义(当定义规则)，但在使用该变量的其他所有文件中，都必须使用关键字extern声明它。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//file1.cpp</span><br><span class="hljs-type">int</span> a;  <span class="hljs-comment">//定义，默认为0</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> b = <span class="hljs-number">4</span>;  <span class="hljs-comment">// 定义，因为初始化了</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> c = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> d = <span class="hljs-number">6</span>;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> e = <span class="hljs-number">7</span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">//file2.cpp</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> a, d, e;  <span class="hljs-comment">//声明，因为有extern且未初始化</span><br><span class="hljs-type">int</span> b, c;  <span class="hljs-comment">// static, const的链接性均为内部</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fun1</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span></span>;  <span class="hljs-comment">//函数声明的extern可省略</span><br></code></pre></td></tr></table></figure><h2 id="其他说明符和限定符"><a href="#其他说明符和限定符" class="headerlink" title="其他说明符和限定符"></a>其他说明符和限定符</h2><ul><li><p>const</p><p>声明为const的变量必须在声明的时候就初始化，并且一旦初始化后，其值就不可改变，且其声明一般是放在头文件中。const变量的链接性为内部。不过可以在定义时使用extern修饰来覆盖默认的内部链接性，将该变量的链接性为外部，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">extern</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> states = <span class="hljs-number">50</span>; <span class="hljs-comment">// definition with external linkage</span><br></code></pre></td></tr></table></figure><p>此时，必须在所有使用该常量的文件中使用extern关键字来声明它，这与常规外部变量不同，定义常规外部变量时，不必使用extern关键字，但在使用该变量的其他文件中必须使用extern。</p></li><li><p>volatile</p><p>提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。如果没有volatile关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。</p></li><li><p>mutable</p><p>mutable修饰的变量表明其无论如何是可改变的。比如一个const对象，其成员变量不可变，此时若声明某个成员变量是mutable的，则它依旧可以通过该const对象来改变该成员变量的值。</p></li></ul><h2 id="函数和链接性"><a href="#函数和链接性" class="headerlink" title="函数和链接性"></a>函数和链接性</h2><p>所有函数的存储持续性都为静态的，即在整个程序执行期间都存在。默认情况下，函数的链接性为外部，即可以在多个文件中共享，但是在另一个文件中可以不使用extern关键字来声明函数原型，而可以直接声明函数原型即可。如果使用static关键字修饰函数，则其链接性将变为内部，此时其只能在一个文件中使用而不能在其他文件中声明和使用，必须在函数原型和函数定义中都使用该关键字，此时如果外部有同名函数，该静态函数将覆盖外部同名函数，就同局部变量覆盖全局变量一样。</p>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wikipedia 相关 API</title>
    <link href="/2022/01/22/Wikipedia%20%E7%9B%B8%E5%85%B3%20API/"/>
    <url>/2022/01/22/Wikipedia%20%E7%9B%B8%E5%85%B3%20API/</url>
    
    <content type="html"><![CDATA[<h2 id="wikipedia-使用教程"><a href="#wikipedia-使用教程" class="headerlink" title="wikipedia 使用教程"></a>wikipedia 使用教程</h2><p><a href="https://pypi.org/project/wikipedia/">https://pypi.org/project/wikipedia/</a></p><p><a href="https://github.com/goldsmith/Wikipedia">https://github.com/goldsmith/Wikipedia</a></p><p><a href="https://www.codenong.com/s-getting-started-with-pythons-wikipedia-api/">https://www.codenong.com/s-getting-started-with-pythons-wikipedia-api/</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install wikipedia <br></code></pre></td></tr></table></figure><h3 id="根据title搜索维基百科文章"><a href="#根据title搜索维基百科文章" class="headerlink" title="根据title搜索维基百科文章"></a>根据title搜索维基百科文章</h3><p>search()方法在Wikipedia中搜索作为其参数提供的查询，返回包含该查询的所有文章标题的列表。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wikipedia <br><span class="hljs-built_in">print</span>(wikipedia.search(<span class="hljs-string">&quot;Bill&quot;</span>))<br><span class="hljs-comment"># [&#x27;Bill&#x27;, &#x27;The Bill&#x27;, &#x27;Bill Nye&#x27;, &#x27;Bill Gates&#x27;, &#x27;Bills, Bills, Bills&#x27;, &#x27;Heartbeat bill&#x27;, &#x27;Bill Clinton&#x27;, &#x27;Buffalo Bill&#x27;, &#x27;Bill &amp; Ted&#x27;, &#x27;Kill Bill: Volume 1&#x27;] </span><br><br><span class="hljs-built_in">print</span>(wikipedia.search(<span class="hljs-string">&quot;Bill&quot;</span>, results=<span class="hljs-number">2</span>))<br><span class="hljs-comment"># [&#x27;Bill&#x27;, &#x27;The Bill&#x27;]</span><br></code></pre></td></tr></table></figure><p> suggest()方法返回与作为参数输入的搜索查询相关的建议，如果找不到建议，它将返回” None”。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wikipedia<br><span class="hljs-built_in">print</span>(wikipedia.suggest(<span class="hljs-string">&quot;Bill cliton&quot;</span>))<br><span class="hljs-comment"># bill clinton</span><br><span class="hljs-comment"># 输入了错误的&quot; Bill clinton&quot;，并返回了正确的建议&quot; bill clinton&quot;</span><br></code></pre></td></tr></table></figure><h3 id="提取维基百科文章摘要"><a href="#提取维基百科文章摘要" class="headerlink" title="提取维基百科文章摘要"></a>提取维基百科文章摘要</h3><p>使用summary()方法提取Wikipedia文章的摘要。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.summary(<span class="hljs-string">&quot;Ubuntu&quot;</span>))  <span class="hljs-comment"># 提取&quot; Ubuntu&quot;的摘要</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Ubuntu ( (listen)) is a free and open-source Linux distribution based on Debian. Ubuntu is officially released in three editions: Desktop, Server, and Core (for the internet of things devices and robots). Ubuntu is a popular operating system for cloud computing, with support for OpenStack.Ubuntu is released every six months, with long-term support (LTS) releases every two years. The latest release is 19.04 (&quot;Disco Dingo&quot;), and the most recent long-term support release is 18.04 LTS (&quot;Bionic Beaver&quot;), which is supported until 2028. Ubuntu is developed by Canonical and the community under a meritocratic governance model. Canonical provides security updates and support for each Ubuntu release, starting from the release date and until the release reaches its designated end-of-life (EOL) date. Canonical generates revenue through the sale of premium services related to Ubuntu. Ubuntu is named after the African philosophy of Ubuntu, which Canonical translates as&quot;humanity to others&quot; or&quot;I am what I am because of who we all are&quot;.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p> 通过配置方法的sentences参数，我们可以自定义要显示的摘要文本中的句子数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.summary(<span class="hljs-string">&quot;Ubuntu&quot;</span>, sentences=<span class="hljs-number">2</span>))<br><span class="hljs-comment"># Ubuntu ( (listen)) is a free and open-source Linux distribution based on Debian. Ubuntu is officially released in three editions: Desktop, Server, and Core (for the internet of things devices and robots).</span><br></code></pre></td></tr></table></figure><p>如果页面不存在或页面是明确的，则wikipedia.summary将引发”歧义消除错误”。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.summary(<span class="hljs-string">&quot;key&quot;</span>))  <span class="hljs-comment"># 抛出DisambiguationError，因为有许多文章与&quot; key&quot;匹配。</span><br></code></pre></td></tr></table></figure><p>通过更具体的查询，可以在输出中获得正确的摘要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.summary(<span class="hljs-string">&quot;Key (cryptography)&quot;</span>))<br></code></pre></td></tr></table></figure><h3 id="维基百科页面对象"><a href="#维基百科页面对象" class="headerlink" title="维基百科页面对象"></a>维基百科页面对象</h3><p>为了获取Wikipedia页面的内容，类别，坐标，图像，链接和其他元数据，我们必须首先获取Wikipedia页面对象或页面的页面ID，可以通过page()方法来获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">wikipedia.page(<span class="hljs-string">&quot;Ubuntu&quot;</span>)  <span class="hljs-comment"># 返回一个WikipediaPage对象</span><br></code></pre></td></tr></table></figure><p>然后调用该类的函数或者变量来获取关于文章的更多信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Python&quot;</span>).content)  <span class="hljs-comment"># 完整纯文本内容(不包括图像，表格等)</span><br><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Python&quot;</span>).url)  <span class="hljs-comment"># 页面的URL</span><br><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Python&quot;</span>).references)  <span class="hljs-comment"># 外部链接的URL</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Python&quot;</span>).title)  <span class="hljs-comment"># 提取页面标题</span><br><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Python&quot;</span>).categories)  <span class="hljs-comment"># 页面的类别列表</span><br><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Ubuntu&quot;</span>).links)  <span class="hljs-comment"># 获取页面中存在链接的页面标题列表</span><br></code></pre></td></tr></table></figure><h4 id="根据坐标查找页面"><a href="#根据坐标查找页面" class="headerlink" title="根据坐标查找页面"></a>根据坐标查找页面</h4><p>geosearch()方法根据提供的坐标返回文章。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.geosearch(<span class="hljs-number">37.787</span>, -<span class="hljs-number">122.4</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[&#x27;140 New Montgomery&#x27;, &#x27;New Montgomery Street&#x27;, &#x27;Cartoon Art Museum&#x27;, &#x27;San Francisco Bay Area Planning and Urban Research Association&#x27;, &#x27;Academy of Art University&#x27;, &#x27;The Montgomery (San Francisco)&#x27;, &#x27;California Historical Society&#x27;, &#x27;Palace Hotel Residential Tower&#x27;, &#x27;St. Regis Museum Tower&#x27;, &#x27;Museum of the African Diaspora&#x27;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>同样，我们可以设置page()的坐标属性，并获取与地理位置有关的文章。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-number">37.787</span>, -<span class="hljs-number">122.4</span>))<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[&#x27;140 New Montgomery&#x27;, &#x27;New Montgomery Street&#x27;, &#x27;Cartoon Art Museum&#x27;, &#x27;San Francisco Bay Area Planning and Urban Research Association&#x27;, &#x27;Academy of Art University&#x27;, &#x27;The Montgomery (San Francisco)&#x27;, &#x27;California Historical Society&#x27;, &#x27;Palace Hotel Residential Tower&#x27;, &#x27;St. Regis Museum Tower&#x27;, &#x27;Museum of the African Diaspora&#x27;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h4 id="语言设定"><a href="#语言设定" class="headerlink" title="语言设定"></a>语言设定</h4><p>通过使用set_lang()方法可以将Wikipedia页面的语言自定义为某种语言。  每种语言都有一个标准的前缀代码，该代码作为参数传递给该方法。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">wikipedia.set_lang(<span class="hljs-string">&quot;de&quot;</span>)  <br><span class="hljs-built_in">print</span>(wikipedia.summary(<span class="hljs-string">&quot;ubuntu&quot;</span>, sentences=<span class="hljs-number">2</span>))  <span class="hljs-comment"># 以德语获取&quot; Ubuntu&quot; Wiki页面的摘要文本的前两个句子。</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Ubuntu (auch Ubuntu Linux) ist eine Linux-Distribution, die auf Debian basiert. Der [Name](http://www.google.com/search?hl=en&amp;q=allinurl%3Adocs.oracle.com+javase+docs+api+name) Ubuntu bedeutet auf Zulu etwa ?Menschlichkeit&quot; und bezeichnet eine afrikanische Philosophie.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.languages())  <span class="hljs-comment"># 检查当前支持的ISO语言列表及其前缀。</span><br></code></pre></td></tr></table></figure><h4 id="检索维基百科页面中的图像和完整HTML页面内容"><a href="#检索维基百科页面中的图像和完整HTML页面内容" class="headerlink" title="检索维基百科页面中的图像和完整HTML页面内容"></a>检索维基百科页面中的图像和完整HTML页面内容</h4><p>从Wikipedia页面获取图像。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;ubuntu&quot;</span>).images[<span class="hljs-number">0</span>])  <span class="hljs-comment">#  从Wikipedia的Ubuntu页面返回第一个图像的链接</span><br></code></pre></td></tr></table></figure><p>获取HTML格式的完整Wikipedia页面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(wikipedia.page(<span class="hljs-string">&quot;Ubuntu&quot;</span>).html())<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;div class=&quot;mw-parser-output&quot;&gt;&lt;div role=&quot;note&quot; class=&quot;hatnote navigation-not-searchable&quot;&gt;For the African philosophy, see &lt;a href=&quot;/wiki/Ubuntu_philosophy&quot; title=&quot;Ubuntu philosophy&quot;&gt;Ubuntu philosophy&lt;/a&gt;. For other uses, see &lt;a href=&quot;/wiki/Ubuntu_(disambiguation)&quot; class=&quot;mw-disambig&quot; title=&quot;Ubuntu (disambiguation)&quot;&gt;Ubuntu (disambiguation)&lt;/a&gt;.&lt;/div&gt; &lt;div class=&quot;shortdescription nomobile noexcerpt noprint searchaux&quot; style=&quot;display:none&quot;&gt;Linux distribution based on Debian&lt;/div&gt; ...</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="Wikipedia-API-使用教程"><a href="#Wikipedia-API-使用教程" class="headerlink" title="Wikipedia API 使用教程"></a>Wikipedia API 使用教程</h2><p><a href="https://pypi.org/project/Wikipedia-API/">https://pypi.org/project/Wikipedia-API/</a></p><p><a href="https://github.com/martin-majlis/Wikipedia-API/">https://github.com/martin-majlis/Wikipedia-API/</a></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> Wikipedia-API<br></code></pre></td></tr></table></figure><p><code>Wikipedia-API</code>是</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> wikipediaapi<br><br>title = <span class="hljs-string">&quot;china&quot;</span><br>wiki = wikipediaapi.Wikipedia(<br>    language=<span class="hljs-string">&#x27;en&#x27;</span>,<br>    extract_format=wikipediaapi.ExtractFormat.WIKI<br>)<br>page = wiki.page(title)<br>language = <span class="hljs-string">&quot;zh&quot;</span><br>lpage = page.langlinks[language]  <span class="hljs-comment"># fr es ...</span><br><span class="hljs-built_in">print</span>(lpage.text)<br></code></pre></td></tr></table></figure><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>This package requires at least Python 3.4 to install because it’s using IntEnum.</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> wikipedia-api<br></code></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>Goal of <code>Wikipedia-API</code> is to provide simple and easy to use API for retrieving informations from Wikipedia. Bellow are examples of common use cases.</p><h4 id="Importing"><a href="#Importing" class="headerlink" title="Importing"></a>Importing</h4><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> wikipediaapi<br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Single-Page"><a href="#How-To-Get-Single-Page" class="headerlink" title="How To Get Single Page"></a>How To Get Single Page</h4><p>Getting single page is straightforward. You have to initialize <code>Wikipedia</code> object and ask for page by its name. It’s parameter language has be one of <a href="http://meta.wikimedia.org/wiki/List_of_Wikipedias">supported languages</a>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-type">wikipediaapi</span><br>    <span class="hljs-variable">wiki_wiki</span> <span class="hljs-operator">=</span> wikipediaapi.Wikipedia(<span class="hljs-string">&#x27;en&#x27;</span>)<br><br>    page_py = wiki_wiki.page(<span class="hljs-string">&#x27;Python_(programming_language)&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="How-To-Check-If-Wiki-Page-Exists"><a href="#How-To-Check-If-Wiki-Page-Exists" class="headerlink" title="How To Check If Wiki Page Exists"></a>How To Check If Wiki Page Exists</h4><p>For checking, whether page exists, you can use function <code>exists</code>.</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta">page_py = wiki_wiki.page(<span class="hljs-string">&#x27;Python_(programming_language)&#x27;</span>)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Page - Exists: %s&quot;</span> % page_py.<span class="hljs-keyword">exists</span>())<br><span class="hljs-meta"># Page - Exists: True</span><br><br>page_missing = wiki_wiki.page(<span class="hljs-string">&#x27;NonExistingPageWithStrangeName&#x27;</span>)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Page - Exists: %s&quot;</span> %     page_missing.<span class="hljs-keyword">exists</span>())<br><span class="hljs-meta"># Page - Exists: False</span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Page-Summary"><a href="#How-To-Get-Page-Summary" class="headerlink" title="How To Get Page Summary"></a>How To Get Page Summary</h4><p>Class <code>WikipediaPage</code> has property <code>summary</code>, which returns description of Wiki page.</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs perl">import wikipediaapi<br>    wiki_wiki = wikipediaapi.Wikipedia(<span class="hljs-string">&#x27;en&#x27;</span>)<br><br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Page - Title: %s&quot;</span> % page_py.title)<br>    <span class="hljs-comment"># Page - Title: Python (programming language)</span><br><br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Page - Summary: %s&quot;</span> % page_py.summary[<span class="hljs-number">0</span>:<span class="hljs-number">60</span>])<br>    <span class="hljs-comment"># Page - Summary: Python is a widely used high-level programming language for</span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Page-URL"><a href="#How-To-Get-Page-URL" class="headerlink" title="How To Get Page URL"></a>How To Get Page URL</h4><p><code>WikipediaPage</code> has two properties with URL of the page. It is <code>fullurl</code> and <code>canonicalurl</code>.</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">print</span>(page_py.fullurl)<br><span class="hljs-meta"># https:<span class="hljs-comment">//en.wikipedia.org/wiki/Python_(programming_language)</span></span><br><br><span class="hljs-keyword">print</span>(page_py.canonicalurl)<br><span class="hljs-meta"># https:<span class="hljs-comment">//en.wikipedia.org/wiki/Python_(programming_language)</span></span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Full-Text"><a href="#How-To-Get-Full-Text" class="headerlink" title="How To Get Full Text"></a>How To Get Full Text</h4><p>To get full text of Wikipedia page you should use property <code>text</code> which constructs text of the page as concatanation of summary and sections with their titles and texts.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros">wiki_wiki = wikipediaapi.Wikipedia(<br>        <span class="hljs-attribute">language</span>=<span class="hljs-string">&#x27;en&#x27;</span>,<br>        <span class="hljs-attribute">extract_format</span>=wikipediaapi.ExtractFormat.WIKI<br>)<br><br>p_wiki = wiki_wiki.page(<span class="hljs-string">&quot;Test 1&quot;</span>)<br><span class="hljs-built_in">print</span>(p_wiki.text)<br><span class="hljs-comment"># Summary</span><br><span class="hljs-comment"># Section 1</span><br><span class="hljs-comment"># Text of section 1</span><br><span class="hljs-comment"># Section 1.1</span><br><span class="hljs-comment"># Text of section 1.1</span><br><span class="hljs-comment"># ...</span><br><br><br>wiki_html = wikipediaapi.Wikipedia(<br>        <span class="hljs-attribute">language</span>=<span class="hljs-string">&#x27;en&#x27;</span>,<br>        <span class="hljs-attribute">extract_format</span>=wikipediaapi.ExtractFormat.HTML<br>)<br>p_html = wiki_html.page(<span class="hljs-string">&quot;Test 1&quot;</span>)<br><span class="hljs-built_in">print</span>(p_html.text)<br><span class="hljs-comment"># &lt;p&gt;Summary&lt;/p&gt;</span><br><span class="hljs-comment"># &lt;h2&gt;Section 1&lt;/h2&gt;</span><br><span class="hljs-comment"># &lt;p&gt;Text of section 1&lt;/p&gt;</span><br><span class="hljs-comment"># &lt;h3&gt;Section 1.1&lt;/h3&gt;</span><br><span class="hljs-comment"># &lt;p&gt;Text of section 1.1&lt;/p&gt;</span><br><span class="hljs-comment"># ...</span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Page-Sections"><a href="#How-To-Get-Page-Sections" class="headerlink" title="How To Get Page Sections"></a>How To Get Page Sections</h4><p>To get all top level sections of page, you have to use property <code>sections</code>. It returns list of <code>WikipediaPageSection</code>, so you have to use recursion to get all subsections.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">def</span> print_sections(sections, level=<span class="hljs-number">0</span>):<br>        <span class="hljs-attribute">for</span> s in sections:<br>                <span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;%s: %s - %s&quot;</span> % (<span class="hljs-string">&quot;*&quot;</span> * (level + <span class="hljs-number">1</span>), s.title, s.text[<span class="hljs-number">0</span>:<span class="hljs-number">40</span>]))<br>                <span class="hljs-attribute">print_sections</span>(s.sections, level + <span class="hljs-number">1</span>)<br><br><br><span class="hljs-attribute">print_sections</span>(page_py.sections)<br><span class="hljs-comment"># *: History - Python was conceived in the late 1980s,</span><br><span class="hljs-comment"># *: Features and philosophy - Python is a multi-paradigm programming l</span><br><span class="hljs-comment"># *: Syntax and semantics - Python is meant to be an easily readable</span><br><span class="hljs-comment"># **: Indentation - Python uses whitespace indentation, rath</span><br><span class="hljs-comment"># **: Statements and control flow - Python&#x27;s statements include (among other</span><br><span class="hljs-comment"># **: Expressions - Some Python expressions are similar to l</span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Page-In-Other-Languages"><a href="#How-To-Get-Page-In-Other-Languages" class="headerlink" title="How To Get Page In Other Languages"></a>How To Get Page In Other Languages</h4><p>If you want to get other translations of given page, you should use property <code>langlinks</code>. It is map, where key is language code and value is <code>WikipediaPage</code>.</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sas">def print_langlinks(<span class="hljs-keyword">page</span>):<br>        langlinks = <span class="hljs-keyword">page</span>.langlinks<br>        for k <span class="hljs-keyword">in</span> sorted(langlinks.keys()):<br>            v = langlinks[k]<br>            pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;%s: %s - %s: %s&quot;</span> % (k, v.language, v.<span class="hljs-keyword">title</span>, v.fullurl))<br><br>print_langlinks(page_py)<br># af: af - Python (programmeertaal): https://af.wikipedia.org/wiki/Python_(programmeertaal)<br># als: als - Python (Programmiersprache): https://als.wikipedia.org/wiki/Python_(Programmiersprache)<br># an: an - Python: https://an.wikipedia.org/wiki/Python<br># ar: ar - بايثون: https://ar.wikipedia.org/wiki/<span class="hljs-title function_">%D8</span><span class="hljs-title function_">%A8</span><span class="hljs-title function_">%D8</span><span class="hljs-title function_">%A7</span><span class="hljs-title function_">%D9</span>%8A<span class="hljs-title function_">%D8</span><span class="hljs-title function_">%AB</span><span class="hljs-title function_">%D9</span>%88<span class="hljs-title function_">%D9</span>%86<br># <span class="hljs-keyword">as</span>: <span class="hljs-keyword">as</span> - পাইথন: https://<span class="hljs-keyword">as</span>.wikipedia.org/wiki/<span class="hljs-title function_">%E0</span><span class="hljs-title function_">%A6</span><span class="hljs-title function_">%AA</span><span class="hljs-title function_">%E0</span><span class="hljs-title function_">%A6</span><span class="hljs-title function_">%BE</span><span class="hljs-title function_">%E0</span><span class="hljs-title function_">%A6</span>%87<span class="hljs-title function_">%E0</span><span class="hljs-title function_">%A6</span><span class="hljs-title function_">%A5</span><span class="hljs-title function_">%E0</span><span class="hljs-title function_">%A6</span><span class="hljs-title function_">%A8</span><br><br>page_py_cs = page_py.langlinks[<span class="hljs-string">&#x27;cs&#x27;</span>]<br>pr<span class="hljs-meta">int</span>(<span class="hljs-string">&quot;Page - Summary: %s&quot;</span> % page_py_cs.summary[0:60])<br># <span class="hljs-keyword">Page</span> - Summary: Python (anglická výslovnost [ˈpaiθtən]) je vysokoúrovňový sk<br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Links-To-Other-Pages"><a href="#How-To-Get-Links-To-Other-Pages" class="headerlink" title="How To Get Links To Other Pages"></a>How To Get Links To Other Pages</h4><p>If you want to get all links to other wiki pages from given page, you need to use property <code>links</code>. It’s map, where key is page title and value is <code>WikipediaPage</code>.</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs hsp">def print_links(page):<br>        links = page.links<br>        <span class="hljs-keyword">for</span> <span class="hljs-keyword">title</span> in sorted(links.keys()):<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;%s: %s&quot;</span> % (<span class="hljs-keyword">title</span>, links[<span class="hljs-keyword">title</span>]))<br><br>print_links(page_py)<br><span class="hljs-meta"># <span class="hljs-number">3</span>ds Max: <span class="hljs-number">3</span>ds Max (id: ??, ns: <span class="hljs-number">0</span>)</span><br><span class="hljs-meta"># ?:: ?: (id: ??, ns: <span class="hljs-number">0</span>)</span><br><span class="hljs-meta"># ABC (programming language): ABC (programming language) (id: ??, ns: <span class="hljs-number">0</span>)</span><br><span class="hljs-meta"># ALGOL <span class="hljs-number">68</span>: ALGOL <span class="hljs-number">68</span> (id: ??, ns: <span class="hljs-number">0</span>)</span><br><span class="hljs-meta"># Abaqus: Abaqus (id: ??, ns: <span class="hljs-number">0</span>)</span><br><span class="hljs-meta"># ...</span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-Page-Categories"><a href="#How-To-Get-Page-Categories" class="headerlink" title="How To Get Page Categories"></a>How To Get Page Categories</h4><p>If you want to get all categories under which page belongs, you should use property <code>categories</code>. It’s map, where key is category title and value is <code>WikipediaPage</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_categories</span>(<span class="hljs-params">page</span>):<br>        categories = page.categories<br>        <span class="hljs-keyword">for</span> title <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(categories.keys()):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s: %s&quot;</span> % (title, categories[title]))<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Categories&quot;</span>)<br>print_categories(page_py)<br><span class="hljs-comment"># Category:All articles containing potentially dated statements: ...</span><br><span class="hljs-comment"># Category:All articles with unsourced statements: ...</span><br><span class="hljs-comment"># Category:Articles containing potentially dated statements from August 2016: ...</span><br><span class="hljs-comment"># Category:Articles containing potentially dated statements from March 2017: ...</span><br><span class="hljs-comment"># Category:Articles containing potentially dated statements from September 2017: ...</span><br></code></pre></td></tr></table></figure><h4 id="How-To-Get-All-Pages-From-Category"><a href="#How-To-Get-All-Pages-From-Category" class="headerlink" title="How To Get All Pages From Category"></a>How To Get All Pages From Category</h4><p>To get all pages from given category, you should use property <code>categorymembers</code>. It returns all members of given category. You have to implement recursion and deduplication by yourself.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">def print_categorymembers(categorymembers, <span class="hljs-attribute">level</span>=0, <span class="hljs-attribute">max_level</span>=1):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> categorymembers.values():<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%s: %s (ns: %d)&quot;</span> % (<span class="hljs-string">&quot;*&quot;</span> * (level + 1), c.title, c.ns))<br>            <span class="hljs-keyword">if</span> c.ns == wikipediaapi.Namespace.CATEGORY <span class="hljs-keyword">and</span> level &lt; max_level:<br>                print_categorymembers(c.categorymembers, <span class="hljs-attribute">level</span>=level + 1, <span class="hljs-attribute">max_level</span>=max_level)<br><br><br>cat = wiki_wiki.page(<span class="hljs-string">&quot;Category:Physics&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Category members: Category:Physics&quot;</span>)<br>print_categorymembers(cat.categorymembers)<br><br><span class="hljs-comment"># Category members: Category:Physics</span><br><span class="hljs-comment"># * Statistical mechanics (ns: 0)</span><br><span class="hljs-comment"># * Category:Physical quantities (ns: 14)</span><br><span class="hljs-comment"># ** Refractive index (ns: 0)</span><br><span class="hljs-comment"># ** Vapor quality (ns: 0)</span><br><span class="hljs-comment"># ** Electric susceptibility (ns: 0)</span><br><span class="hljs-comment"># ** Specific weight (ns: 0)</span><br><span class="hljs-comment"># ** Category:Viscosity (ns: 14)</span><br><span class="hljs-comment"># *** Brookfield Engineering (ns: 0)</span><br></code></pre></td></tr></table></figure><h4 id="How-To-See-Underlying-API-Call"><a href="#How-To-See-Underlying-API-Call" class="headerlink" title="How To See Underlying API Call"></a>How To See Underlying API Call</h4><p>If you have problems with retrieving data you can get URL of undrerlying API call. This will help you determine if the problem is in the library or somewhere else.</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">import wikipediaapi<br>import sys<br>wikipediaapi.log.set<span class="hljs-constructor">Level(<span class="hljs-params">level</span>=<span class="hljs-params">wikipediaapi</span>.<span class="hljs-params">logging</span>.DEBUG)</span><br><br># Set handler <span class="hljs-keyword">if</span> you use Python <span class="hljs-keyword">in</span> interactive mode<br>out_hdlr = wikipediaapi.logging.<span class="hljs-constructor">StreamHandler(<span class="hljs-params">sys</span>.<span class="hljs-params">stderr</span>)</span><br>out_hdlr.set<span class="hljs-constructor">Formatter(<span class="hljs-params">wikipediaapi</span>.<span class="hljs-params">logging</span>.Formatter(&#x27;%(<span class="hljs-params">asctime</span>)</span>s %(message)s&#x27;))<br>out_hdlr.set<span class="hljs-constructor">Level(<span class="hljs-params">wikipediaapi</span>.<span class="hljs-params">logging</span>.DEBUG)</span><br>wikipediaapi.log.add<span class="hljs-constructor">Handler(<span class="hljs-params">out_hdlr</span>)</span><br><br>wiki = wikipediaapi.<span class="hljs-constructor">Wikipedia(<span class="hljs-params">language</span>=&#x27;<span class="hljs-params">en</span>&#x27;)</span><br><br>page_ostrava = wiki.page(&#x27;Ostrava&#x27;)<br>print(page_ostrava.summary)<br># logger prints out: Request URL: http:<span class="hljs-comment">//en.wikipedia.org/w/api.php?action=query&amp;prop=extracts&amp;titles=Ostrava&amp;explaintext=1&amp;exsectionformat=wiki</span><br></code></pre></td></tr></table></figure><h3 id="External-Links"><a href="#External-Links" class="headerlink" title="External Links"></a>External Links</h3><ul><li><a href="https://github.com/martin-majlis/Wikipedia-API/">GitHub</a></li><li><a href="https://pypi.python.org/pypi/Wikipedia-API/">PyPi</a></li><li><a href="https://travis-ci.org/martin-majlis/Wikipedia-API/">Travis</a></li><li><a href="http://wikipedia-api.readthedocs.io/">ReadTheDocs</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wikidump 语料处理</title>
    <link href="/2021/11/28/Wikidump%20%E8%AF%AD%E6%96%99%E5%A4%84%E7%90%86/"/>
    <url>/2021/11/28/Wikidump%20%E8%AF%AD%E6%96%99%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p><a href="https://dumps.wikimedia.org/enwiki/latest/">wikidumps</a></p><p><a href="https://github.com/clab/wikipedia-parallel-titles">wikipedia-parallel-titles</a></p><p><a href="https://blog.csdn.net/qq_38796548/article/details/108318375">使用wikiextractor提取wikidumps语料</a></p><p><a href="https://blog.csdn.net/bekote/article/details/89180243">基于维基百科语料生成平行句对</a></p><p><a href="https://blog.csdn.net/weixin_40902563/article/details/89311189">基于维基百科构建平行语料库</a></p><h2 id="wikidumps语料下载"><a href="#wikidumps语料下载" class="headerlink" title="wikidumps语料下载"></a>wikidumps语料下载</h2><p>wikidumps网址为<a href="https://dumps.wikimedia.org/enwiki/latest/">en-wikidumps</a></p><h2 id="wikidumps语料的处理"><a href="#wikidumps语料的处理" class="headerlink" title="wikidumps语料的处理"></a>wikidumps语料的处理</h2><p>处理wikidumps语料可以用wikiextractor工具来提取。实现需要安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> wikiextractor<br></code></pre></td></tr></table></figure><p>然后可以有两种方法使用，一种是将库中的python模块用作脚本去运行</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python -m wikiextractor<span class="hljs-selector-class">.WikiExtractor</span> enwiki-latest-pages-articles<span class="hljs-selector-class">.xml</span>.bz2<br></code></pre></td></tr></table></figure><p>或者进入安装好的wikiextractor目录运行WikiExtractor.py来处理wikidumps预料</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python WikiExtractor<span class="hljs-selector-class">.py</span> enwiki-latest-pages-articles<span class="hljs-selector-class">.xml</span>.bz2<br></code></pre></td></tr></table></figure><p>一些常见的参数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>.-b  文件容量  ，例如：-b <span class="hljs-number">100</span>M 当输出文件达到<span class="hljs-number">100</span>M时，自动新增文件，即可能生成多个文件<br><span class="hljs-attribute">2</span>.-o 输出文件的名称，可前面加路径，例如：-o AA_yue 或-o /extract/AA_yue，默认输出文件夹为text<br></code></pre></td></tr></table></figure><p>处理后的文件格式为</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;doc id<span class="hljs-operator">=</span><span class="hljs-string">&quot;244&quot;</span> url<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://zh.wikipedia.org/wiki?curid=244&quot;</span> title<span class="hljs-operator">=</span><span class="hljs-string">&quot;史家&quot;</span>&gt;<br>史家<br><br>歷史學家也稱歷史家、史學家、史家，指以撰写历史著作为职业或对历史学的创立、发展与应用付出努力的知识分子。历史学家包括历史记录的编撰者和史料的研究者。人們研究歷史必須倚靠前人所留下的記錄。歷史學家會研究過去所發生的事件和這些事件記錄的真確性，並將他們的研究記錄下來。歷史學家的研究對象可以是某人的經歷，某城市、某地或某國家的發展。根據他們不同的研究對象，歷史可有不同的分類，例如：<br>個人歷史<br>個人歷史，是有關某人過去發生的事做研究。<br>地方歷史<br>地方歷史，是有關某城市或某地曾發生事件的研究。<br>...<br><br>&lt;/doc&gt;<br>&lt;doc id<span class="hljs-operator">=</span><span class="hljs-string">&quot;256&quot;</span> url<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://zh.wikipedia.org/wiki?curid=256&quot;</span> title<span class="hljs-operator">=</span><span class="hljs-string">&quot;开放源代码&quot;</span>&gt;<br>...<br>&lt;/doc&gt;<br></code></pre></td></tr></table></figure><h2 id="wikidumps语料按照title对齐"><a href="#wikidumps语料按照title对齐" class="headerlink" title="wikidumps语料按照title对齐"></a>wikidumps语料按照title对齐</h2><h3 id="在线方式"><a href="#在线方式" class="headerlink" title="在线方式"></a>在线方式</h3><p>在线方式可以使用特定的api来进行对齐，如wikipedia或者wikipediaapi，具体可见 <a href="https://kaimss.github.io/2022/01/22/Wikipedia%20%E7%9B%B8%E5%85%B3%20API/">Wikipedia 相关 API</a></p><h3 id="离线方式"><a href="#离线方式" class="headerlink" title="离线方式"></a>离线方式</h3><p>离线方式需要我们先下载好对齐语料，然后用工具处理，然后自己编写程序获取对齐信息。</p><p>首先从wikidumps中下载对齐所需的语料，其命名格式为</p><p>*-page.sql.gz</p><p>*-langlinks.sql.gz</p><p>其中*是个前缀，一般包含语种简写和时间信息。然后使用<a href="https://github.com/clab/wikipedia-parallel-titles">wikipedia-parallel-titles</a>工具来生成标题对齐信息，该工具库中有一个<code>build-corpus.sh</code>脚本，运行此脚本即可得到标题对齐文件，运行命令为<code>./build-corpus.sh en zhwiki-latest &gt; titles.txt</code>，该命令实现的是根据zhwiki-latest得到与en的标题对齐文件titles.txt。</p>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PPL 计算</title>
    <link href="/2021/09/28/PPL%20%E8%AE%A1%E7%AE%97/"/>
    <url>/2021/09/28/PPL%20%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h2 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h2><p><a href="https://github.com/xu-song/bert-as-language-model">https://github.com/xu-song/bert-as-language-model</a></p><p><a href="https://stackoverflow.com/questions/63030692/how-do-i-use-bertformaskedlm-or-bertmodel-to-calculate-perplexity-of-a-sentence">https://stackoverflow.com/questions/63030692/how-do-i-use-bertformaskedlm-or-bertmodel-to-calculate-perplexity-of-a-sentence</a></p><p><a href="https://github.com/ymcui/Chinese-BERT-wwm">https://github.com/ymcui/Chinese-BERT-wwm</a></p><p>对于给定的sentence，按顺序依次mask掉一个token，并计算所预测单词的nll loss，将所有的token的loss求和再取平均，最后取以自然数为底的次方即为该句话的PPL。</p><p>测试写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, BertForMaskedLM<br><span class="hljs-comment"># Load pre-trained model (weights)</span><br><span class="hljs-keyword">with</span> torch.no_grad():<br>    model = BertForMaskedLM.from_pretrained(<span class="hljs-string">&#x27;hfl/chinese-bert-wwm-ext&#x27;</span>)<br>    model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-comment"># Load pre-trained model tokenizer (vocabulary)</span><br>    tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&#x27;hfl/chinese-bert-wwm-ext&#x27;</span>)<br>    sentence = <span class="hljs-string">&quot;我不会忘记和你一起奋斗的时光。&quot;</span><br>    tokenize_input = tokenizer.tokenize(sentence)<br>    tensor_input = torch.tensor([tokenizer.convert_tokens_to_ids(tokenize_input)])<br>    sen_len = <span class="hljs-built_in">len</span>(tokenize_input)<br>    sentence_loss = <span class="hljs-number">0.</span><br><br>    <span class="hljs-keyword">for</span> i, word <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(tokenize_input):<br>        <span class="hljs-comment"># add mask to i-th character of the sentence</span><br>        tokenize_input[i] = <span class="hljs-string">&#x27;[MASK]&#x27;</span><br>        mask_input = torch.tensor([tokenizer.convert_tokens_to_ids(tokenize_input)])<br><br>        output = model(mask_input)<br><br>        prediction_scores = output[<span class="hljs-number">0</span>]<br>        softmax = nn.Softmax(dim=<span class="hljs-number">0</span>)<br>        ps = softmax(prediction_scores[<span class="hljs-number">0</span>, i]).log()<br>        word_loss = ps[tensor_input[<span class="hljs-number">0</span>, i]]<br>        sentence_loss += word_loss.item()<br><br>        tokenize_input[i] = word<br>    ppl = np.exp(-sentence_loss/sen_len)<br>    <span class="hljs-built_in">print</span>(ppl)<br></code></pre></td></tr></table></figure><p>tensor思维的写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">score</span>(<span class="hljs-params">model, tokenizer, sentence,  mask_token_id=<span class="hljs-number">103</span></span>):<br>  tensor_input = tokenizer.encode(sentence, return_tensors=<span class="hljs-string">&#x27;pt&#x27;</span>)<br>  repeat_input = tensor_input.repeat(tensor_input.size(-<span class="hljs-number">1</span>)-<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br>  mask = torch.ones(tensor_input.size(-<span class="hljs-number">1</span>) - <span class="hljs-number">1</span>).diag(<span class="hljs-number">1</span>)[:-<span class="hljs-number">2</span>]<br>  masked_input = repeat_input.masked_fill(mask == <span class="hljs-number">1</span>, <span class="hljs-number">103</span>)<br>  labels = repeat_input.masked_fill( masked_input != <span class="hljs-number">103</span>, -<span class="hljs-number">100</span>)<br>  loss,_ = model(masked_input, masked_lm_labels=labels)<br>  result = np.exp(loss.item())<br>  <span class="hljs-keyword">return</span> result<br><br>s = score(model, tokenizer, <span class="hljs-string">&#x27;我不会忘记和你一起奋斗的时光。&#x27;</span>)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h2 id="GPT-2"><a href="#GPT-2" class="headerlink" title="GPT-2"></a>GPT-2</h2><p><a href="https://github.com/Morizeyao/GPT2-Chinese">https://github.com/Morizeyao/GPT2-Chinese</a></p><p>官方的gpt-2不支持中文，且是BPE分词方式。对于中文，有NLPer训练出了中文的gpt-2模型，且分词采用的是bert tokenizer的分词方式。</p><p>对于给定的sentence，若其长度为n，首先将其向左偏移一位作为label，将其去除末位作为input，将gpt-2的输出与label求cross entroy loss，再求以自然数为底的次方即为该句话的PPL。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> BertTokenizer, GPT2LMHeadModel<br><span class="hljs-keyword">from</span> torch.nn <span class="hljs-keyword">import</span> CrossEntropyLoss<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal_ppl_bygpt2</span>():<br>    sens = [<span class="hljs-string">&quot;今天是个好日子。&quot;</span>, <span class="hljs-string">&quot;天今子日。个是好&quot;</span>, <span class="hljs-string">&quot;这个婴儿有900000克呢。&quot;</span>, <span class="hljs-string">&quot;我不会忘记和你一起奋斗的时光。&quot;</span>,<br>            <span class="hljs-string">&quot;我不会记忘和你一起奋斗的时光。&quot;</span>, <span class="hljs-string">&quot;会我记忘和你斗起一奋的时光。&quot;</span>]<br>    tokenizer = BertTokenizer.from_pretrained(<span class="hljs-string">&quot;uer/gpt2-chinese-cluecorpussmall&quot;</span>)<br>    model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;uer/gpt2-chinese-cluecorpussmall&quot;</span>)<br>    inputs = tokenizer(sens, padding=<span class="hljs-string">&#x27;max_length&#x27;</span>, max_length=<span class="hljs-number">50</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)<br>    bs, sl = inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>].size()<br>    outputs = model(**inputs, labels=inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>])<br>    logits = outputs[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># Shift so that tokens &lt; n predict n</span><br>    shift_logits = logits[:, :-<span class="hljs-number">1</span>, :].contiguous()<br>    shift_labels = inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>][:, <span class="hljs-number">1</span>:].contiguous()<br>    shift_attentions = inputs[<span class="hljs-string">&#x27;attention_mask&#x27;</span>][:, <span class="hljs-number">1</span>:].contiguous()<br>    <span class="hljs-comment"># Flatten the tokens</span><br>    loss_fct = CrossEntropyLoss(ignore_index=<span class="hljs-number">0</span>, reduction=<span class="hljs-string">&quot;none&quot;</span>)<br>    loss = loss_fct(shift_logits.view(-<span class="hljs-number">1</span>, shift_logits.size(-<span class="hljs-number">1</span>)), shift_labels.view(-<span class="hljs-number">1</span>)).detach().reshape(bs, -<span class="hljs-number">1</span>)<br>    meanloss = loss.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>) / shift_attentions.<span class="hljs-built_in">sum</span>(<span class="hljs-number">1</span>)<br>    ppl = torch.exp(meanloss).numpy().tolist()<br>    <span class="hljs-keyword">return</span> ppl<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    cal_ppl_bygpt2()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>NLP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NLP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 数字与字符串的转换</title>
    <link href="/2020/02/23/C++%20%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <url>/2020/02/23/C++%20%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="C-的stringstream类-来源-lt-sstream-gt"><a href="#C-的stringstream类-来源-lt-sstream-gt" class="headerlink" title="C++的stringstream类(来源:&lt;sstream&gt;)"></a>C++的stringstream类(来源:&lt;sstream&gt;)</h2><p><strong>1.字符串到数字</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">string str = <span class="hljs-string">&quot;854&quot;</span>;<br><span class="hljs-function">stringstream <span class="hljs-title">sstr</span><span class="hljs-params">(str)</span></span>;<br><span class="hljs-type">int</span> x;<br>sstr &gt;&gt; x;<span class="hljs-comment">//即从sstr中提取数据</span><br></code></pre></td></tr></table></figure><p><strong>2.数字到字符串</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">stringstream sstr;<br>string str;<br><span class="hljs-type">double</span> x = <span class="hljs-number">154.83</span>;<br>sstr &lt;&lt; x;<br>str = sstr.<span class="hljs-built_in">str</span>();<span class="hljs-comment">//或者sstr &gt;&gt; str;</span><br></code></pre></td></tr></table></figure><ul><li>缺点：处理大量数据转换速度较慢。stringstream不会主动释放内存，如果要在程序中用同一个流，需要适时地清除一下缓存（用stream.str(“”)和stream.clear()).</li><li>注：<code>&gt;&gt;</code>是流提取符，<code>&lt;&lt;</code>是流插入符</li></ul><h2 id="C标准库sprintf、sscanf函数-来源-lt-stdio-h-gt-or-lt-cstdio-gt"><a href="#C标准库sprintf、sscanf函数-来源-lt-stdio-h-gt-or-lt-cstdio-gt" class="headerlink" title="C标准库sprintf、sscanf函数(来源:&lt;stdio.h&gt; or &lt;cstdio&gt;)"></a>C标准库sprintf、sscanf函数(来源:&lt;stdio.h&gt; or &lt;cstdio&gt;)</h2><p><strong>1.用sprintf函数将数字转换成字符串(char[])</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> val = <span class="hljs-number">1234</span>;<br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">sprintf</span>(str,<span class="hljs-string">&quot;%d&quot;</span>,val);<br></code></pre></td></tr></table></figure><p><strong>2.用sscanf函数将字符串(char[])转换成数字</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> str[] = <span class="hljs-string">&quot;15.455&quot;</span>;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">float</span> fp;<br><span class="hljs-built_in">sscanf</span>( str, <span class="hljs-string">&quot;%d&quot;</span>, &amp;i ); <span class="hljs-comment">// 将字符串转换成整数 i = 15</span><br><span class="hljs-built_in">sscanf</span>( str, <span class="hljs-string">&quot;%f&quot;</span>, &amp;fp ); <span class="hljs-comment">// 将字符串转换成浮点数 fp = 15.455000</span><br></code></pre></td></tr></table></figure><h2 id="C标准库atoi等与itoa等函数-来源-lt-stdlib-h-gt-or-lt-cstdlib-gt"><a href="#C标准库atoi等与itoa等函数-来源-lt-stdlib-h-gt-or-lt-cstdlib-gt" class="headerlink" title="C标准库atoi等与itoa等函数(来源:&lt;stdlib.h&gt; or &lt;cstdlib&gt;)"></a>C标准库atoi等与itoa等函数(来源:&lt;stdlib.h&gt; or &lt;cstdlib&gt;)</h2><p><em><em>1.用atoi函数将字符串(char</em>)转换成数字</em>*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//int atoi(char*);</span><br>string a = <span class="hljs-string">&quot;1234&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *b = <span class="hljs-string">&quot;1234&quot;</span>;<br><span class="hljs-type">char</span> c[<span class="hljs-number">5</span>]=<span class="hljs-string">&quot;1234&quot;</span>;<br><br><span class="hljs-type">int</span> d = <span class="hljs-built_in">atoi</span>(a.<span class="hljs-built_in">c_str</span>());<br><span class="hljs-type">int</span> e = <span class="hljs-built_in">atoi</span>(b);<br><span class="hljs-type">int</span> f = <span class="hljs-built_in">atoi</span>(c);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">原型：long strtol(char* str, char** endptr, int base);</span><br><span class="hljs-comment">str：欲转换的字符串的起始地址；endptr：非法字符后的起始地址；base：将字符串按照base进制转换。</span><br><span class="hljs-comment">功能：把一个字符串以base进制转换成数字，将不能转换的部分存入endptr指向的地址。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> szNumbers[] = <span class="hljs-string">&quot;2001 60c0c0 -1101110100110100100000 0x6fffff&quot;</span>;<br><span class="hljs-type">char</span> * pEnd;<br><span class="hljs-type">long</span> <span class="hljs-type">int</span> li1, li2, li3, li4;<br>li1 = <span class="hljs-built_in">strtol</span> (szNumbers,&amp;pEnd,<span class="hljs-number">10</span>);<br>li2 = <span class="hljs-built_in">strtol</span> (pEnd,&amp;pEnd,<span class="hljs-number">16</span>);<br>li3 = <span class="hljs-built_in">strtol</span> (pEnd,&amp;pEnd,<span class="hljs-number">2</span>);<br>li4 = <span class="hljs-built_in">strtol</span> (pEnd,<span class="hljs-literal">NULL</span>,<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//其他的类似函数</span><br><span class="hljs-comment">//atoi</span><br><span class="hljs-comment">//atol</span><br><span class="hljs-comment">//atoll</span><br><span class="hljs-comment">//atof</span><br><span class="hljs-comment">//strtod</span><br><span class="hljs-comment">//strtof</span><br><span class="hljs-comment">//strtol</span><br><span class="hljs-comment">//strtold</span><br><span class="hljs-comment">//strtoll</span><br><span class="hljs-comment">//strtoul</span><br><span class="hljs-comment">//strtoull</span><br></code></pre></td></tr></table></figure><p><em><em>2.用itoa函数将数字转换成字符串(char</em>)</em>*</p><ul><li><strong>注：itoa函数非标准函数</strong></li><li><strong>一个更标准的用法是采用sprintf（如上）</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">原型：char* itoa(int value, char *str,int base);</span><br><span class="hljs-comment">value：欲转换的数字；str：目标字符串的地址；base：将数字转换成base进制的字符串。</span><br><span class="hljs-comment">功能：把一个数字转换成base进制的字符串。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> num = <span class="hljs-number">125</span>;<br><span class="hljs-type">char</span> str[<span class="hljs-number">10</span>];<br><span class="hljs-built_in">itoa</span>(num, str, <span class="hljs-number">16</span>);<span class="hljs-comment">//str = 7d</span><br><br><span class="hljs-comment">//其他的类似函数</span><br><span class="hljs-comment">//itoa</span><br><span class="hljs-comment">//ltoa</span><br><span class="hljs-comment">//ultoa</span><br><span class="hljs-comment">//gcvt</span><br><span class="hljs-comment">//ecvt</span><br><br></code></pre></td></tr></table></figure><h2 id="C-的to-string与stoi等函数-来源-lt-string-gt"><a href="#C-的to-string与stoi等函数-来源-lt-string-gt" class="headerlink" title="C++的to_string与stoi等函数(来源:&lt;string&gt;)"></a>C++的to_string与stoi等函数(来源:&lt;string&gt;)</h2><p><strong>1.用to_string函数将数字转换为字符串(string)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">string <span class="hljs-title">to_string</span><span class="hljs-params">(T value)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>2.用stoi等函数将字符串(string)转换为数字</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">原型：int stoi(string str, size_t* idx = 0, int base = 10);</span><br><span class="hljs-comment">str：欲转换的数据；idx：目标字符串的起始转换地址；base：待转换数据的进制。</span><br><span class="hljs-comment">功能：把一个字符串按照base进制转换成数字，至str的第一个非法字符结束</span><br><span class="hljs-comment">*/</span><br>string str = <span class="hljs-string">&quot;115.5xy&quot;</span>;<br><span class="hljs-type">int</span> val = std::<span class="hljs-built_in">stoi</span>(str,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">// val = 3</span><br><span class="hljs-type">long</span> val1 = std::<span class="hljs-built_in">stol</span>(str);<span class="hljs-comment">// val1 = 115</span><br><span class="hljs-type">float</span> val2 = std::<span class="hljs-built_in">stof</span>(str);<span class="hljs-comment">// val2 = 115.5</span><br><span class="hljs-comment">//其他类似函数</span><br><span class="hljs-comment">//stoi</span><br><span class="hljs-comment">//stol</span><br><span class="hljs-comment">//stoul</span><br><span class="hljs-comment">//stoll</span><br><span class="hljs-comment">//stof</span><br><span class="hljs-comment">//stod</span><br><span class="hljs-comment">//stold</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 输入输出流</title>
    <link href="/2020/02/23/C++%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/"/>
    <url>/2020/02/23/C++%20%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h1><p><strong>输出流：<code>ostream</code></strong></p><p><strong>输入流：<code>istream</code></strong></p><p><strong>输入输出流：<code>iostream</code></strong></p><p><code>iostream</code>中定义了输入流对象<code>cin</code>与输出流对象<code>cout</code>。</p><p><code>cin</code>是一个<code>istream</code>类的对象，它从标准输入设备(键盘)获取数据，程序中的变量通过流提取运算符<code>&gt;&gt;</code>从流中提取数据。流提取符“&gt;&gt;”从流中提取数据时通常跳过输人流中的空格、tab键、换行符等空白字符。<strong>注意</strong>：只有在输入完数据再按回车键后，该行数据才被送入键盘缓冲区，形成输入流，提取运算符<code>&gt;&gt;</code>才能从中提取数据。</p><p><code>cout</code>是一个<code>ostream</code>类的对象，它通过流插入运算符<code>&lt;&lt;</code>向输出设备(屏幕)输出其后的变量。程序中的变量借由<code>cout</code>对象并通过流插入运算符<code>&lt;&lt;</code>向输出设备输出。</p><p><strong>在定义流对象时，系统会在内存中开辟一段缓冲区，用来暂存输入输出流的数据。</strong></p><h2 id="cin-gt-gt"><a href="#cin-gt-gt" class="headerlink" title="cin&gt;&gt;"></a>cin&gt;&gt;</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*cin&gt;&gt;T</span><br><span class="hljs-comment">接受一个字符串，遇空格tab换行结束，返回cin对象。</span><br><span class="hljs-comment">&gt;&gt;(流提取符)用于从cin输入流中提取指定类型数据赋值给T</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>若缓冲区中第一个字符是空格、tab或换行这些分隔符时，cin&gt;&gt;会将其忽略并清除，继续读取下一个字符。</strong></p><p><strong>若缓冲区为空，则继续等待。</strong></p><p><strong>分隔符残留在缓冲区</strong>。</p><h2 id="cin-get"><a href="#cin-get" class="headerlink" title="cin.get()"></a>cin.get()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> cin.<span class="hljs-built_in">get</span>();<span class="hljs-comment">//接受一个字符(包括空格tab换行)并返回该字符的asc码值</span><br>istream&amp; cin.<span class="hljs-built_in">get</span>(<span class="hljs-type">char</span>&amp; var);<span class="hljs-comment">//接受一个字符(包括空格tab换行)</span><br>istream&amp; cin.<span class="hljs-built_in">get</span>(<span class="hljs-type">char</span>* s, streamsize n);<span class="hljs-comment">//以指定长度读取字符串(读取到n-1个字符)，遇换行符结束读取</span><br>istream&amp; cin.<span class="hljs-built_in">get</span>(<span class="hljs-type">char</span>* s,  streamsize  n, <span class="hljs-type">char</span> delim);<span class="hljs-comment">////以指定长度读取字符串，遇指定的字符delim结束读取</span><br><span class="hljs-comment">//还有两种get的重载形式，但暂时不用</span><br><span class="hljs-comment">//使用第三、四种get，注意结束符需要用第一或第二中get清除缓冲区的结束符，否则会出错</span><br></code></pre></td></tr></table></figure><p><strong>结束符残留在缓冲区</strong>。</p><h2 id="cin-getline"><a href="#cin-getline" class="headerlink" title="cin.getline()"></a>cin.getline()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//从标准输入设备键盘读取一串指定长度的字符串，并以指定的结束符结束。</span><br>istream&amp; cin.<span class="hljs-built_in">getline</span>(<span class="hljs-type">char</span>* s, streamsize count); <br>istream&amp; cin.<span class="hljs-built_in">getline</span>(<span class="hljs-type">char</span>* s, streamsize count, <span class="hljs-type">char</span> delim);<br></code></pre></td></tr></table></figure><p><strong>与cin.get()区别：</strong></p><ul><li><strong>结束符不会残留在缓冲区。</strong></li><li><strong>cin.get(char*,int)当输入的字符串超长时，不会引起cin函数的错误，后面的cin操作会继续执行，只是直接从缓冲区中取数据。但是cin.getline(char*,int)当输入超长时，会引起cin函数的错误，后面的cin操作将不再执行。</strong></li></ul><h2 id="getline"><a href="#getline" class="headerlink" title="getline()"></a>getline()</h2><p>C++中定义了一个在std名字空间的全局函数getline，因为这个getline函数的参数使用了string字符串，所以声明在了&lt; string&gt;头文件中了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//从输入流is中读取一行到字符串str中,当遇到如下三种情况会结束读操作：1）到文件结束，2）遇到结束符，3）输入达到最大限度。</span><br><span class="hljs-function">istream&amp; <span class="hljs-title">getline</span><span class="hljs-params">(istream&amp; is, string&amp; str)</span></span>;<br><span class="hljs-function">istream&amp; <span class="hljs-title">getline</span><span class="hljs-params">(istream&amp; is, string&amp; str, <span class="hljs-type">char</span> delim)</span></span>;<br></code></pre></td></tr></table></figure><p><strong>注意，getline遇到结束符时，结束符不会残留在缓存中。因此，进行从键盘读取一行字符时，建议使用getline，较为安全。</strong></p><p>注：如果输入流是文件输入流(即读取文件)，则就变为读取文件了。</p><h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h2><p>gets是C中的库函数，在&lt; stdio.h&gt;申明，从标准输入设备读字符串，可以无限读取，不会判断上限，以回车结束或者EOF时停止读取，所以程序员应该确保buffer的空间足够大，以便在执行读操作时不发生溢出。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//函数原型：char *gets( char *buffer );</span><br></code></pre></td></tr></table></figure><p>cin.good()与cin.fail()用于判断cin输入的类型是否符合要求</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> a;<br>cin &gt;&gt; a;<br><span class="hljs-keyword">if</span> (!cin.<span class="hljs-built_in">good</span>())<br>    <span class="hljs-comment">//输入类型错误</span><br><span class="hljs-comment">//do something...</span><br><br></code></pre></td></tr></table></figure><p>另，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// &lt;&lt;与&gt;&gt;的重载实例</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Complex</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">friend</span> ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream&amp;,Complex&amp;); <span class="hljs-comment">//声明重载运算符“&lt;&lt;”</span><br>  <span class="hljs-keyword">friend</span> istream&amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream&amp;,Complex&amp;); <span class="hljs-comment">//声明重载运算符“&gt;&gt;”</span><br><span class="hljs-keyword">private</span>:<br>  <span class="hljs-type">double</span> real;<br>  <span class="hljs-type">double</span> imag;<br>&#125;;<br>ostream&amp; <span class="hljs-keyword">operator</span> &lt;&lt; (ostream&amp; output,Complex&amp; c) &#123;<span class="hljs-comment">//定义重载运算符“&lt;&lt;”</span><br>  output&lt;&lt;<span class="hljs-string">&quot;(&quot;</span>&lt;&lt;c.real&lt;&lt;<span class="hljs-string">&quot;+&quot;</span>&lt;&lt;c.imag&lt;&lt;<span class="hljs-string">&quot;i)&quot;</span>;<br>  <span class="hljs-keyword">return</span> output;<br>&#125;<br>istream&amp; <span class="hljs-keyword">operator</span> &gt;&gt; (istream&amp; input,Complex&amp; c) &#123;<span class="hljs-comment">//定义重载运算符“&gt;&gt;”</span><br>  cout&lt;&lt;<span class="hljs-string">&quot;input real part and imaginary part of complex number:&quot;</span>;<br>  input&gt;&gt;c.real&gt;&gt;c.imag;<br>  <span class="hljs-keyword">return</span> input;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C++</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git 常用命令</title>
    <link href="/2019/05/08/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2019/05/08/Git%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p><strong>源状态</strong>–modify–&gt;<strong>工作区</strong>–add–&gt;<strong>暂存区</strong>–commit–&gt;(本地仓库)–push–&gt;<strong>远程仓库</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs sh">git init  <span class="hljs-comment">#创建本地仓库</span><br><br>git <span class="hljs-built_in">log</span>  <span class="hljs-comment">#查看提交历史，已确定要回退到哪个版本</span><br>git reflog  <span class="hljs-comment">#查看命令历史，以便确定要回到未来的哪个版本</span><br><br>git add file_name  <span class="hljs-comment">#添加与文件file_name文件相关的修改到暂存区</span><br>git add --all  <span class="hljs-comment">#添加所有修改到暂存区</span><br>git add .  <span class="hljs-comment">#添加所有修改到暂存区</span><br><br>git status  <span class="hljs-comment">#查看当前状态</span><br>git commit -m <span class="hljs-string">&quot;commit_message&quot;</span>  <span class="hljs-comment">#提交更改至仓库，并附带提交信息&quot;commit_message&quot;</span><br>git commit --amend  <span class="hljs-comment">#修改刚刚commit的commit信息</span><br><br>git rebase -i HEAD~6  <span class="hljs-comment">#合并最近的6个版本的提交</span><br><br>git checkout --file_name  <span class="hljs-comment">#撤销掉关于file_name文件的工作区的修改，即让文件回到最近一次git commit或git add时的状态</span><br>git checkout .  <span class="hljs-comment">#撤销掉所有关于工作区的修改</span><br><br>git revert -n commit_id  <span class="hljs-comment">#撤销某次操作，此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交</span><br><br>git reset (--mixed) HEAD  <span class="hljs-comment">#回退到最新的提交，保留工作区的修改，不保留暂存区的修改记录</span><br>git reset (--mixed) HEAD file_name  <span class="hljs-comment">#将file_name状态回退到最新的提交，保留对其工作区的修改</span><br>git reset --soft HEAD^  <span class="hljs-comment">#回退到上一次提交时的状态，保留工作区和暂存区的修改</span><br>git reset --hard  <span class="hljs-comment">#强制回退最新提交时的状态，不保留工作区和暂存区的修改</span><br>git reset --hard HEAD^  <span class="hljs-comment">#强制回退到上次提交时的状态，不保留工作区和暂存区的修改，HEAD是指向最新的提交，上一次提交是HEAD^,上上次是HEAD^^,也可以写成HEAD～2，并以此类推</span><br>git reset --hard commit_id  <span class="hljs-comment">#强制回退到版本号为commit_id的提交版本</span><br><br>git fsck --lost-found  <span class="hljs-comment">#在本地项目文件中路径为.git/lost-found/other中找到已经add但没有commit的文件(一般是在错误使用git reset --hard 后补偿用 )</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">git remote add name URL <span class="hljs-comment">#关联远程仓库，设置远程仓库名称为name，远程仓库链接为URL</span><br>git push origin first:master <span class="hljs-comment">#推送本地first分支至origin主机远程的master分支，如果远程没有则创建</span><br>git push -f  <span class="hljs-comment">#强制push到远程仓库</span><br>git pull origin first:master <span class="hljs-comment">#取回origin主机的first分支并与本地master合并</span><br><br>git fetch origin master <span class="hljs-comment">#取回origin主机的master分支</span><br>git merge origin/master <span class="hljs-comment">#与本地当前分支合并</span><br><br>git fetch orgin master:tmp <span class="hljs-comment">#从远程仓库master分支获取最新，在本地建立tmp分支</span><br>git diff tmp <span class="hljs-comment">#將當前分支和tmp進行對比</span><br>git merge tmp <span class="hljs-comment">#合并tmp分支到当前分支</span><br><br>git rebase master <span class="hljs-comment">#当执行rebase操作时，git会从两个分支的共同祖先开始提取待变基分支上的修改，然后将待变基分支指向基分支的最新提交，最后将刚才提取的修改应用到基分支的最新提交的后面。若当前处于feature分支，且是从某个基底a修改而来，master也是从a修改而来，执行之后，保存feature的提交，然后删除，找到master最新提交，并应用保存的提交；这样feature的基底就变成了master。</span><br><br>git branch -r/-a <span class="hljs-comment">#查看远程分支/所有分支</span><br>git branch tmp <span class="hljs-comment">#本地创建分支tmp</span><br>git checkout tmp <span class="hljs-comment">#切换分支到tmp</span><br>git branch -d tmp <span class="hljs-comment">#删除本地tmp分支</span><br>git push orgin --delete tmp <span class="hljs-comment">#删除远程orgin上的tmp分支</span><br></code></pre></td></tr></table></figure><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><ul><li><p><strong>-–hard</strong> 强制回退版本，不保留工作区和暂存区的修改。</p></li><li><p><strong>–soft</strong> 回退到某一版本，保留工作区和暂存区的修改。</p></li><li><p><strong>–-mixed（默认）</strong> 回退到某一版本，保留暂存区的修改，不保留工作区的修改。</p></li></ul><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p><a href="https://blog.csdn.net/weixin_42310154/article/details/119004977">https://blog.csdn.net/weixin_42310154/article/details/119004977</a></p><p><a href="https://baijiahao.baidu.com/s?id=1633418495146592435&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1633418495146592435&amp;wfr=spider&amp;for=pc</a></p><h2 id="git-stash-x2F-unstash"><a href="#git-stash-x2F-unstash" class="headerlink" title="git stash&#x2F;unstash"></a>git stash&#x2F;unstash</h2>]]></content>
    
    
    <categories>
      
      <category>Techonology</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Techonology</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
